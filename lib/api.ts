/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * Groble API
 * Groble 서비스의 API 명세서입니다.
 * OpenAPI spec version: v1.0.0
 */
import { customFetch } from './custom-fetch';
export interface Accessor {
  id?: number;
  email?: string;
  roles?: string[];
  userType?: string;
  userId?: number;
}

export interface PasswordRequest {
  /** @pattern ^(?=.*[0-9])(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>/?]).{6,}$ */
  password: string;
}

export interface ErrorDetail {
  code?: string;
  message?: string;
  exception?: string;
  field?: string;
  trace?: string;
}

export type GrobleResponseStatus = typeof GrobleResponseStatus[keyof typeof GrobleResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseStatus = {
  SUCCESS: 'SUCCESS',
  ERROR: 'ERROR',
  FAIL: 'FAIL',
} as const;

export type GrobleResponseData = { [key: string]: unknown };

export interface GrobleResponse {
  status?: GrobleResponseStatus;
  code?: number;
  message?: string;
  data?: GrobleResponseData;
  error?: ErrorDetail;
  timestamp?: string;
}

export type GrobleResponseVoidStatus = typeof GrobleResponseVoidStatus[keyof typeof GrobleResponseVoidStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseVoidStatus = {
  SUCCESS: 'SUCCESS',
  ERROR: 'ERROR',
  FAIL: 'FAIL',
} as const;

export type GrobleResponseVoidData = { [key: string]: unknown };

export interface GrobleResponseVoid {
  status?: GrobleResponseVoidStatus;
  code?: number;
  message?: string;
  data?: GrobleResponseVoidData;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface NicknameRequest {
  /** @pattern ^[가-힣a-zA-Z0-9]{2,15}$ */
  nickname: string;
}

export type GrobleResponseNicknameResponseStatus = typeof GrobleResponseNicknameResponseStatus[keyof typeof GrobleResponseNicknameResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseNicknameResponseStatus = {
  SUCCESS: 'SUCCESS',
  ERROR: 'ERROR',
  FAIL: 'FAIL',
} as const;

export interface GrobleResponseNicknameResponse {
  status?: GrobleResponseNicknameResponseStatus;
  code?: number;
  message?: string;
  data?: NicknameResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface NicknameResponse {
  nickname?: string;
}

export type TermsAgreementRequestTermsTypesItem = typeof TermsAgreementRequestTermsTypesItem[keyof typeof TermsAgreementRequestTermsTypesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TermsAgreementRequestTermsTypesItem = {
  AGE_POLICY: 'AGE_POLICY',
  PRIVACY_POLICY: 'PRIVACY_POLICY',
  SERVICE_TERMS: 'SERVICE_TERMS',
  SALES_TERMS: 'SALES_TERMS',
  MARKETING: 'MARKETING',
  ADVERTISING: 'ADVERTISING',
} as const;

export interface TermsAgreementRequest {
  termsTypes: TermsAgreementRequestTermsTypesItem[];
}

export type GrobleResponseTermsAgreementResponseStatus = typeof GrobleResponseTermsAgreementResponseStatus[keyof typeof GrobleResponseTermsAgreementResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseTermsAgreementResponseStatus = {
  SUCCESS: 'SUCCESS',
  ERROR: 'ERROR',
  FAIL: 'FAIL',
} as const;

export interface GrobleResponseTermsAgreementResponse {
  status?: GrobleResponseTermsAgreementResponseStatus;
  code?: number;
  message?: string;
  data?: TermsAgreementResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export type TermsAgreementResponseType = typeof TermsAgreementResponseType[keyof typeof TermsAgreementResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TermsAgreementResponseType = {
  AGE_POLICY: 'AGE_POLICY',
  PRIVACY_POLICY: 'PRIVACY_POLICY',
  SERVICE_TERMS: 'SERVICE_TERMS',
  SALES_TERMS: 'SALES_TERMS',
  MARKETING: 'MARKETING',
  ADVERTISING: 'ADVERTISING',
} as const;

export interface TermsAgreementResponse {
  id?: number;
  type?: TermsAgreementResponseType;
  title?: string;
  version?: string;
  required?: boolean;
  contentUrl?: string;
  agreed?: boolean;
  agreedAt?: string;
  effectiveFrom?: string;
  effectiveTo?: string;
}

export interface RoleTypeRequest {
  /** @pattern ^(SELLER|BUYER)$ */
  userType: string;
}

/**
 * 이메일 인증 코드 검증 요청
 */
export interface VerifyEmailCodeRequest {
  /** 사용자 이메일 */
  email: string;
  /**
   * 이메일로 발송된 인증 코드
   * @minLength 6
   * @maxLength 6
   */
  verificationCode: string;
}

/**
 * 회원가입 정보
 */
export interface SignUpRequest {
  email: string;
  /**
   * @minLength 8
   * @maxLength 32
   * @pattern ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{8,}$
   */
  password: string;
}

export type GrobleResponseSignUpResponseStatus = typeof GrobleResponseSignUpResponseStatus[keyof typeof GrobleResponseSignUpResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseSignUpResponseStatus = {
  SUCCESS: 'SUCCESS',
  ERROR: 'ERROR',
  FAIL: 'FAIL',
} as const;

export interface GrobleResponseSignUpResponse {
  status?: GrobleResponseSignUpResponseStatus;
  code?: number;
  message?: string;
  data?: SignUpResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface SignUpResponse {
  email?: string;
  authenticated?: boolean;
}

/**
 * 로그인 정보
 */
export interface SignInRequest {
  email: string;
  /**
   * @minLength 8
   * @maxLength 32
   * @pattern ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{8,}$
   */
  password: string;
}

export type GrobleResponseSignInResponseStatus = typeof GrobleResponseSignInResponseStatus[keyof typeof GrobleResponseSignInResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseSignInResponseStatus = {
  SUCCESS: 'SUCCESS',
  ERROR: 'ERROR',
  FAIL: 'FAIL',
} as const;

export interface GrobleResponseSignInResponse {
  status?: GrobleResponseSignInResponseStatus;
  code?: number;
  message?: string;
  data?: SignInResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface SignInResponse {
  email?: string;
  authenticated?: boolean;
  userType?: string;
  nextRoutePath?: string;
}

export interface ResetPasswordRequest {
  email: string;
  /**
   * @minLength 8
   * @maxLength 32
   * @pattern ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{8,}$
   */
  newPassword: string;
  token: string;
}

/**
 * 이메일 인증 정보
 */
export interface EmailVerificationRequest {
  email: string;
}

export type GrobleResponseNicknameDuplicateCheckResponseStatus = typeof GrobleResponseNicknameDuplicateCheckResponseStatus[keyof typeof GrobleResponseNicknameDuplicateCheckResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseNicknameDuplicateCheckResponseStatus = {
  SUCCESS: 'SUCCESS',
  ERROR: 'ERROR',
  FAIL: 'FAIL',
} as const;

export interface GrobleResponseNicknameDuplicateCheckResponse {
  status?: GrobleResponseNicknameDuplicateCheckResponseStatus;
  code?: number;
  message?: string;
  data?: NicknameDuplicateCheckResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface NicknameDuplicateCheckResponse {
  nickname?: string;
  duplicated?: boolean;
}

export type SetPasswordParams = {
accessor: Accessor;
};

export type SetNicknameParams = {
accessor: Accessor;
};

export type WithdrawTermsAgreementParams = {
accessor: Accessor;
};

export type AgreeToTermsParams = {
accessor: Accessor;
};

export type SwitchRoleParams = {
accessor: Accessor;
};

export type LogoutParams = {
accessor: Accessor;
};

export type CheckNicknameDuplicateParams = {
value: string;
};

export type GetUserTermsAgreementsParams = {
accessor: Accessor;
};

export type AuthorizeParams = {
redirect_uri: string;
provider: string;
};

/**
 * 비밀번호를 생성 또는 수정합니다.
 * @summary 비밀번호 생성/수정
 */
export type setPasswordResponse200 = {
  data: GrobleResponse
  status: 200
}

export type setPasswordResponse400 = {
  data: GrobleResponseVoid
  status: 400
}
    
export type setPasswordResponseComposite = setPasswordResponse200 | setPasswordResponse400;
    
export type setPasswordResponse = setPasswordResponseComposite & {
  headers: Headers;
}

export const getSetPasswordUrl = (params: SetPasswordParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dev.groble.im/api/v1/users/password?${stringifiedParams}` : `https://api.dev.groble.im/api/v1/users/password`
}

export const setPassword = async (passwordRequest: PasswordRequest,
    params: SetPasswordParams, options?: RequestInit): Promise<setPasswordResponse> => {
  
  return customFetch<setPasswordResponse>(getSetPasswordUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      passwordRequest,)
  }
);}



/**
 * 닉네임을 생성 또는 수정합니다.
 * @summary 닉네임 생성/수정
 */
export type setNicknameResponse200 = {
  data: GrobleResponse
  status: 200
}

export type setNicknameResponse400 = {
  data: GrobleResponseNicknameResponse
  status: 400
}
    
export type setNicknameResponseComposite = setNicknameResponse200 | setNicknameResponse400;
    
export type setNicknameResponse = setNicknameResponseComposite & {
  headers: Headers;
}

export const getSetNicknameUrl = (params: SetNicknameParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dev.groble.im/api/v1/users/nickname?${stringifiedParams}` : `https://api.dev.groble.im/api/v1/users/nickname`
}

export const setNickname = async (nicknameRequest: NicknameRequest,
    params: SetNicknameParams, options?: RequestInit): Promise<setNicknameResponse> => {
  
  return customFetch<setNicknameResponse>(getSetNicknameUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      nicknameRequest,)
  }
);}



/**
 * 사용자가 동의한 약관을 철회합니다. 필수 약관은 철회할 수 없습니다.
 * @summary 약관 동의 철회
 */
export type withdrawTermsAgreementResponse200 = {
  data: GrobleResponse
  status: 200
}

export type withdrawTermsAgreementResponse400 = {
  data: GrobleResponseTermsAgreementResponse
  status: 400
}
    
export type withdrawTermsAgreementResponseComposite = withdrawTermsAgreementResponse200 | withdrawTermsAgreementResponse400;
    
export type withdrawTermsAgreementResponse = withdrawTermsAgreementResponseComposite & {
  headers: Headers;
}

export const getWithdrawTermsAgreementUrl = (params: WithdrawTermsAgreementParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dev.groble.im/api/v1/terms/withdraw?${stringifiedParams}` : `https://api.dev.groble.im/api/v1/terms/withdraw`
}

export const withdrawTermsAgreement = async (termsAgreementRequest: TermsAgreementRequest,
    params: WithdrawTermsAgreementParams, options?: RequestInit): Promise<withdrawTermsAgreementResponse> => {
  
  return customFetch<withdrawTermsAgreementResponse>(getWithdrawTermsAgreementUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      termsAgreementRequest,)
  }
);}



/**
 * 사용자가 약관에 동의합니다.
 * @summary 약관 동의
 */
export type agreeToTermsResponse200 = {
  data: GrobleResponse
  status: 200
}

export type agreeToTermsResponse400 = {
  data: GrobleResponseTermsAgreementResponse
  status: 400
}
    
export type agreeToTermsResponseComposite = agreeToTermsResponse200 | agreeToTermsResponse400;
    
export type agreeToTermsResponse = agreeToTermsResponseComposite & {
  headers: Headers;
}

export const getAgreeToTermsUrl = (params: AgreeToTermsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dev.groble.im/api/v1/terms/agree?${stringifiedParams}` : `https://api.dev.groble.im/api/v1/terms/agree`
}

export const agreeToTerms = async (termsAgreementRequest: TermsAgreementRequest,
    params: AgreeToTermsParams, options?: RequestInit): Promise<agreeToTermsResponse> => {
  
  return customFetch<agreeToTermsResponse>(getAgreeToTermsUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      termsAgreementRequest,)
  }
);}



export type switchRoleResponse200 = {
  data: GrobleResponseVoid
  status: 200
}
    
export type switchRoleResponseComposite = switchRoleResponse200;
    
export type switchRoleResponse = switchRoleResponseComposite & {
  headers: Headers;
}

export const getSwitchRoleUrl = (params: SwitchRoleParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dev.groble.im/api/v1/switch-role?${stringifiedParams}` : `https://api.dev.groble.im/api/v1/switch-role`
}

export const switchRole = async (roleTypeRequest: RoleTypeRequest,
    params: SwitchRoleParams, options?: RequestInit): Promise<switchRoleResponse> => {
  
  return customFetch<switchRoleResponse>(getSwitchRoleUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      roleTypeRequest,)
  }
);}



/**
 * 이메일로 발송된 인증 코드의 유효성을 검증합니다.
 * @summary 이메일 인증 코드 확인
 */
export type verifyEmailCodeResponse200 = {
  data: GrobleResponse
  status: 200
}

export type verifyEmailCodeResponse400 = {
  data: GrobleResponseVoid
  status: 400
}
    
export type verifyEmailCodeResponseComposite = verifyEmailCodeResponse200 | verifyEmailCodeResponse400;
    
export type verifyEmailCodeResponse = verifyEmailCodeResponseComposite & {
  headers: Headers;
}

export const getVerifyEmailCodeUrl = () => {


  

  return `https://api.dev.groble.im/api/v1/auth/verify-code`
}

export const verifyEmailCode = async (verifyEmailCodeRequest: VerifyEmailCodeRequest, options?: RequestInit): Promise<verifyEmailCodeResponse> => {
  
  return customFetch<verifyEmailCodeResponse>(getVerifyEmailCodeUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      verifyEmailCodeRequest,)
  }
);}



/**
 * 새로운 사용자를 등록하고 인증 토큰을 발급합니다.
 * @summary 회원가입
 */
export type signUpResponse201 = {
  data: GrobleResponse
  status: 201
}

export type signUpResponse400 = {
  data: GrobleResponseSignUpResponse
  status: 400
}
    
export type signUpResponseComposite = signUpResponse201 | signUpResponse400;
    
export type signUpResponse = signUpResponseComposite & {
  headers: Headers;
}

export const getSignUpUrl = () => {


  

  return `https://api.dev.groble.im/api/v1/auth/sign-up`
}

export const signUp = async (signUpRequest: SignUpRequest, options?: RequestInit): Promise<signUpResponse> => {
  
  return customFetch<signUpResponse>(getSignUpUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      signUpRequest,)
  }
);}



/**
 * 이메일과 비밀번호로 로그인하고 인증 토큰을 발급합니다.
 * @summary 로그인
 */
export type signInResponse200 = {
  data: GrobleResponse
  status: 200
}

export type signInResponse400 = {
  data: GrobleResponseSignInResponse
  status: 400
}
    
export type signInResponseComposite = signInResponse200 | signInResponse400;
    
export type signInResponse = signInResponseComposite & {
  headers: Headers;
}

export const getSignInUrl = () => {


  

  return `https://api.dev.groble.im/api/v1/auth/sign-in`
}

export const signIn = async (signInRequest: SignInRequest, options?: RequestInit): Promise<signInResponse> => {
  
  return customFetch<signInResponse>(getSignInUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      signInRequest,)
  }
);}



/**
 * 새로운 비밀번호로 재설정합니다.
 * @summary 비밀번호 재설정
 */
export type resetPasswordResponse200 = {
  data: GrobleResponseVoid
  status: 200
}

export type resetPasswordResponse400 = {
  data: GrobleResponseVoid
  status: 400
}
    
export type resetPasswordResponseComposite = resetPasswordResponse200 | resetPasswordResponse400;
    
export type resetPasswordResponse = resetPasswordResponseComposite & {
  headers: Headers;
}

export const getResetPasswordUrl = () => {


  

  return `https://api.dev.groble.im/api/v1/auth/password/reset`
}

export const resetPassword = async (resetPasswordRequest: ResetPasswordRequest, options?: RequestInit): Promise<resetPasswordResponse> => {
  
  return customFetch<resetPasswordResponse>(getResetPasswordUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      resetPasswordRequest,)
  }
);}



/**
 * 비밀번호 재설정 링크가 포함된 이메일을 발송합니다.
 * @summary 비밀번호 재설정 이메일 발송
 */
export type requestPasswordResetResponse200 = {
  data: GrobleResponseVoid
  status: 200
}

export type requestPasswordResetResponse400 = {
  data: GrobleResponseVoid
  status: 400
}
    
export type requestPasswordResetResponseComposite = requestPasswordResetResponse200 | requestPasswordResetResponse400;
    
export type requestPasswordResetResponse = requestPasswordResetResponseComposite & {
  headers: Headers;
}

export const getRequestPasswordResetUrl = () => {


  

  return `https://api.dev.groble.im/api/v1/auth/password/reset-request`
}

export const requestPasswordReset = async (emailVerificationRequest: EmailVerificationRequest, options?: RequestInit): Promise<requestPasswordResetResponse> => {
  
  return customFetch<requestPasswordResetResponse>(getRequestPasswordResetUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      emailVerificationRequest,)
  }
);}



/**
 * 로그아웃을 통해 쿠키와 토큰을 무효화합니다.
 * @summary 로그아웃
 */
export type logoutResponse200 = {
  data: GrobleResponse
  status: 200
}
    
export type logoutResponseComposite = logoutResponse200;
    
export type logoutResponse = logoutResponseComposite & {
  headers: Headers;
}

export const getLogoutUrl = (params: LogoutParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dev.groble.im/api/v1/auth/logout?${stringifiedParams}` : `https://api.dev.groble.im/api/v1/auth/logout`
}

export const logout = async (params: LogoutParams, options?: RequestInit): Promise<logoutResponse> => {
  
  return customFetch<logoutResponse>(getLogoutUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



/**
 * 회원가입할 이메일에게 인증 코드를 발급합니다.
 * @summary 회원가입 인증
 */
export type sendEmailVerificationResponse200 = {
  data: GrobleResponse
  status: 200
}

export type sendEmailVerificationResponse400 = {
  data: GrobleResponseVoid
  status: 400
}
    
export type sendEmailVerificationResponseComposite = sendEmailVerificationResponse200 | sendEmailVerificationResponse400;
    
export type sendEmailVerificationResponse = sendEmailVerificationResponseComposite & {
  headers: Headers;
}

export const getSendEmailVerificationUrl = () => {


  

  return `https://api.dev.groble.im/api/v1/auth/email-verification`
}

export const sendEmailVerification = async (emailVerificationRequest: EmailVerificationRequest, options?: RequestInit): Promise<sendEmailVerificationResponse> => {
  
  return customFetch<sendEmailVerificationResponse>(getSendEmailVerificationUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      emailVerificationRequest,)
  }
);}



/**
 * 닉네임이 이미 사용 중인지 확인합니다. 회원가입 및 닉네임 수정 시 사용됩니다.
 * @summary 닉네임 중복 확인
 */
export type checkNicknameDuplicateResponse200 = {
  data: GrobleResponse
  status: 200
}

export type checkNicknameDuplicateResponse400 = {
  data: GrobleResponseNicknameDuplicateCheckResponse
  status: 400
}
    
export type checkNicknameDuplicateResponseComposite = checkNicknameDuplicateResponse200 | checkNicknameDuplicateResponse400;
    
export type checkNicknameDuplicateResponse = checkNicknameDuplicateResponseComposite & {
  headers: Headers;
}

export const getCheckNicknameDuplicateUrl = (params: CheckNicknameDuplicateParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dev.groble.im/api/v1/users/nickname/check?${stringifiedParams}` : `https://api.dev.groble.im/api/v1/users/nickname/check`
}

export const checkNicknameDuplicate = async (params: CheckNicknameDuplicateParams, options?: RequestInit): Promise<checkNicknameDuplicateResponse> => {
  
  return customFetch<checkNicknameDuplicateResponse>(getCheckNicknameDuplicateUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * 사용자의 약관 동의 상태를 조회합니다.
 * @summary 사용자 약관 동의 상태 조회
 */
export type getUserTermsAgreementsResponse200 = {
  data: GrobleResponse
  status: 200
}
    
export type getUserTermsAgreementsResponseComposite = getUserTermsAgreementsResponse200;
    
export type getUserTermsAgreementsResponse = getUserTermsAgreementsResponseComposite & {
  headers: Headers;
}

export const getGetUserTermsAgreementsUrl = (params: GetUserTermsAgreementsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dev.groble.im/api/v1/terms/user?${stringifiedParams}` : `https://api.dev.groble.im/api/v1/terms/user`
}

export const getUserTermsAgreements = async (params: GetUserTermsAgreementsParams, options?: RequestInit): Promise<getUserTermsAgreementsResponse> => {
  
  return customFetch<getUserTermsAgreementsResponse>(getGetUserTermsAgreementsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * 현재 유효한 최신 버전의 약관 목록을 조회합니다.
 * @summary 현재 유효한 약관 목록 조회
 */
export type getActiveTermsResponse200 = {
  data: GrobleResponse
  status: 200
}
    
export type getActiveTermsResponseComposite = getActiveTermsResponse200;
    
export type getActiveTermsResponse = getActiveTermsResponseComposite & {
  headers: Headers;
}

export const getGetActiveTermsUrl = () => {


  

  return `https://api.dev.groble.im/api/v1/terms/active`
}

export const getActiveTerms = async ( options?: RequestInit): Promise<getActiveTermsResponse> => {
  
  return customFetch<getActiveTermsResponse>(getGetActiveTermsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * 소셜 로그인 시작 전 리다이렉트 URI를 설정합니다.
 * @summary OAuth2 로그인 시작
 */
export type authorizeResponse200 = {
  data: void
  status: 200
}
    
export type authorizeResponseComposite = authorizeResponse200;
    
export type authorizeResponse = authorizeResponseComposite & {
  headers: Headers;
}

export const getAuthorizeUrl = (params: AuthorizeParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dev.groble.im/api/v1/oauth2/authorize?${stringifiedParams}` : `https://api.dev.groble.im/api/v1/oauth2/authorize`
}

export const authorize = async (params: AuthorizeParams, options?: RequestInit): Promise<authorizeResponse> => {
  
  return customFetch<authorizeResponse>(getAuthorizeUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}
