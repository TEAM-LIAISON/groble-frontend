/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Groble API
 * Groble ÏÑúÎπÑÏä§Ïùò API Î™ÖÏÑ∏ÏÑúÏûÖÎãàÎã§.
 * OpenAPI spec version: v1.0.0
 */
import { customFetch } from "./custom-fetch";
export interface Accessor {
  id?: number;
  email?: string;
  roles?: string[];
  userType?: string;
  accountType?: string;
  userId?: number;
}

export interface UserTypeRequest {
  /** @pattern ^(SELLER|BUYER)$ */
  userType: string;
}

export interface ErrorDetail {
  code?: string;
  message?: string;
  exception?: string;
  field?: string;
  trace?: string;
}

export type GrobleResponseVoidStatus =
  (typeof GrobleResponseVoidStatus)[keyof typeof GrobleResponseVoidStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseVoidStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export type GrobleResponseVoidData = { [key: string]: unknown };

export interface GrobleResponseVoid {
  status?: GrobleResponseVoidStatus;
  code?: number;
  message?: string;
  data?: GrobleResponseVoidData;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface PasswordRequest {
  /** @pattern ^(?=.*[0-9])(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>/?]).{6,}$ */
  password: string;
}

export type GrobleResponseStatus =
  (typeof GrobleResponseStatus)[keyof typeof GrobleResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export type GrobleResponseData = { [key: string]: unknown };

export interface GrobleResponse {
  status?: GrobleResponseStatus;
  code?: number;
  message?: string;
  data?: GrobleResponseData;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface PasswordChangeRequest {
  token: string;
  newPassword: string;
}

export interface PasswordResetRequest {
  email: string;
}

export interface NicknameRequest {
  /** @pattern ^[Í∞Ä-Ìû£a-zA-Z0-9]{2,15}$ */
  nickname: string;
}

export type GrobleResponseNicknameResponseStatus =
  (typeof GrobleResponseNicknameResponseStatus)[keyof typeof GrobleResponseNicknameResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseNicknameResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseNicknameResponse {
  status?: GrobleResponseNicknameResponseStatus;
  code?: number;
  message?: string;
  data?: NicknameResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface NicknameResponse {
  nickname?: string;
}

export type TermsAgreementRequestTermsTypesItem =
  (typeof TermsAgreementRequestTermsTypesItem)[keyof typeof TermsAgreementRequestTermsTypesItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TermsAgreementRequestTermsTypesItem = {
  AGE_POLICY: "AGE_POLICY",
  SELLER_TERMS: "SELLER_TERMS",
  PRIVACY_POLICY: "PRIVACY_POLICY",
  SERVICE_TERMS: "SERVICE_TERMS",
  SALES_TERMS: "SALES_TERMS",
  MARKETING: "MARKETING",
  ADVERTISING: "ADVERTISING",
} as const;

export interface TermsAgreementRequest {
  termsTypes: TermsAgreementRequestTermsTypesItem[];
}

export type GrobleResponseTermsAgreementResponseStatus =
  (typeof GrobleResponseTermsAgreementResponseStatus)[keyof typeof GrobleResponseTermsAgreementResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseTermsAgreementResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseTermsAgreementResponse {
  status?: GrobleResponseTermsAgreementResponseStatus;
  code?: number;
  message?: string;
  data?: TermsAgreementResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export type TermsAgreementResponseType =
  (typeof TermsAgreementResponseType)[keyof typeof TermsAgreementResponseType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TermsAgreementResponseType = {
  AGE_POLICY: "AGE_POLICY",
  SELLER_TERMS: "SELLER_TERMS",
  PRIVACY_POLICY: "PRIVACY_POLICY",
  SERVICE_TERMS: "SERVICE_TERMS",
  SALES_TERMS: "SALES_TERMS",
  MARKETING: "MARKETING",
  ADVERTISING: "ADVERTISING",
} as const;

export interface TermsAgreementResponse {
  id?: number;
  type?: TermsAgreementResponseType;
  title?: string;
  version?: string;
  required?: boolean;
  contentUrl?: string;
  agreed?: boolean;
  agreedAt?: string;
  effectiveFrom?: string;
  effectiveTo?: string;
}

export interface AdvertisingAgreementRequest {
  agreed: boolean;
}

/**
 * Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏΩîÎìú Í≤ÄÏ¶ù ÏöîÏ≤≠
 */
export interface VerifyEmailCodeRequest {
  /** ÏÇ¨Ïö©Ïûê Ïù¥Î©îÏùº */
  email: string;
  /**
   * Ïù¥Î©îÏùºÎ°ú Î∞úÏÜ°Îêú Ïù∏Ï¶ù ÏΩîÎìú
   * @minLength 4
   * @maxLength 4
   */
  verificationCode: string;
}

export type GrobleResponseSignInResponseStatus =
  (typeof GrobleResponseSignInResponseStatus)[keyof typeof GrobleResponseSignInResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseSignInResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseSignInResponse {
  status?: GrobleResponseSignInResponseStatus;
  code?: number;
  message?: string;
  data?: SignInResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface SignInResponse {
  email?: string;
  authenticated?: boolean;
  userType?: string;
  nextRoutePath?: string;
}

/**
 * ÌöåÏõêÍ∞ÄÏûÖ Ï†ïÎ≥¥
 */
export interface SignUpRequest {
  email: string;
  /**
   * @minLength 8
   * @maxLength 32
   * @pattern ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{8,}$
   */
  password: string;
}

export type GrobleResponseSignUpResponseStatus =
  (typeof GrobleResponseSignUpResponseStatus)[keyof typeof GrobleResponseSignUpResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseSignUpResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseSignUpResponse {
  status?: GrobleResponseSignUpResponseStatus;
  code?: number;
  message?: string;
  data?: SignUpResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface SignUpResponse {
  email?: string;
  authenticated?: boolean;
}

/**
 * Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥
 */
export interface SignInRequest {
  /** ÏÇ¨Ïö©Ïûê Ïù¥Î©îÏùº */
  email: string;
  /**
   * ÏÇ¨Ïö©Ïûê ÎπÑÎ∞ÄÎ≤àÌò∏
   * @minLength 6
   * @maxLength 32
   * @pattern ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{6,}$
   */
  password: string;
}

export interface ResetPasswordRequest {
  /**
   * @minLength 8
   * @maxLength 32
   * @pattern ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{8,}$
   */
  newPassword: string;
  token: string;
}

/**
 * Ïù¥Î©îÏùº Ïù∏Ï¶ù Ï†ïÎ≥¥
 */
export interface EmailVerificationRequest {
  email: string;
}

export type GrobleResponseNicknameDuplicateCheckResponseStatus =
  (typeof GrobleResponseNicknameDuplicateCheckResponseStatus)[keyof typeof GrobleResponseNicknameDuplicateCheckResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseNicknameDuplicateCheckResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseNicknameDuplicateCheckResponse {
  status?: GrobleResponseNicknameDuplicateCheckResponseStatus;
  code?: number;
  message?: string;
  data?: NicknameDuplicateCheckResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface NicknameDuplicateCheckResponse {
  nickname?: string;
  duplicated?: boolean;
}

export type GrobleResponseUserMyPageSummaryResponseStatus =
  (typeof GrobleResponseUserMyPageSummaryResponseStatus)[keyof typeof GrobleResponseUserMyPageSummaryResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseUserMyPageSummaryResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseUserMyPageSummaryResponse {
  status?: GrobleResponseUserMyPageSummaryResponseStatus;
  code?: number;
  message?: string;
  data?: UserMyPageSummaryResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export type UserMyPageSummaryResponseUserType =
  (typeof UserMyPageSummaryResponseUserType)[keyof typeof UserMyPageSummaryResponseUserType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserMyPageSummaryResponseUserType = {
  BUYER: "BUYER",
  SELLER: "SELLER",
} as const;

export interface UserMyPageSummaryResponse {
  nickName?: string;
  profileImageUrl?: string;
  userType?: UserMyPageSummaryResponseUserType;
  canSwitchToSeller?: boolean;
}

export type GrobleResponseUserMyPageDetailResponseStatus =
  (typeof GrobleResponseUserMyPageDetailResponseStatus)[keyof typeof GrobleResponseUserMyPageDetailResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseUserMyPageDetailResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseUserMyPageDetailResponse {
  status?: GrobleResponseUserMyPageDetailResponseStatus;
  code?: number;
  message?: string;
  data?: UserMyPageDetailResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export type UserMyPageDetailResponseAccountType =
  (typeof UserMyPageDetailResponseAccountType)[keyof typeof UserMyPageDetailResponseAccountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserMyPageDetailResponseAccountType = {
  INTEGRATED: "INTEGRATED",
  SOCIAL: "SOCIAL",
} as const;

export type UserMyPageDetailResponseProviderType =
  (typeof UserMyPageDetailResponseProviderType)[keyof typeof UserMyPageDetailResponseProviderType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserMyPageDetailResponseProviderType = {
  GOOGLE: "GOOGLE",
  KAKAO: "KAKAO",
  NAVER: "NAVER",
} as const;

export interface UserMyPageDetailResponse {
  nickName?: string;
  accountType?: UserMyPageDetailResponseAccountType;
  providerType?: UserMyPageDetailResponseProviderType;
  email?: string;
  profileImageUrl?: string;
  phoneNumber?: string;
  sellerAccountNotCreated?: boolean;
}

export type GrobleResponseBooleanStatus =
  (typeof GrobleResponseBooleanStatus)[keyof typeof GrobleResponseBooleanStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseBooleanStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseBoolean {
  status?: GrobleResponseBooleanStatus;
  code?: number;
  message?: string;
  data?: boolean;
  error?: ErrorDetail;
  timestamp?: string;
}

export type SwitchUserTypeParams = {
  accessor: Accessor;
};

export type SetPasswordParams = {
  accessor: Accessor;
};

export type SetNicknameParams = {
  accessor: Accessor;
};

export type SetInitialUserTypeParams = {
  accessor: Accessor;
};

export type WithdrawTermsAgreementParams = {
  accessor: Accessor;
};

export type GetAdvertisingAgreementStatusParams = {
  accessor: Accessor;
};

export type UpdateAdvertisingAgreementStatusParams = {
  accessor: Accessor;
};

export type AgreeToTermsParams = {
  accessor: Accessor;
};

export type VerifyEmailCodeForChangeEmailParams = {
  accessor: Accessor;
};

export type ValidateTokenParams = {
  accessor: Accessor;
};

export type ResetPassword1Params = {
  accessor: Accessor;
};

export type LogoutParams = {
  accessor: Accessor;
};

export type CheckNicknameDuplicateParams = {
  value: string;
};

export type GetUserMyPageSummaryParams = {
  accessor: Accessor;
};

export type GetUserMyPageDetailParams = {
  accessor: Accessor;
};

export type GetUserTermsAgreementsParams = {
  accessor: Accessor;
};

export type AuthorizeParams = {
  redirect_uri?: string;
  provider: string;
};

/**
 * ÌåêÎß§Ïûê ÎòêÎäî Íµ¨Îß§ÏûêÎ°ú Í∞ÄÏûÖ Ïú†ÌòïÏùÑ Ï†ÑÌôòÌï©ÎãàÎã§.
 * @summary Í∞ÄÏûÖ Ïú†Ìòï Ï†ÑÌôò
 */
export type switchUserTypeResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type switchUserTypeResponseComposite = switchUserTypeResponse200;

export type switchUserTypeResponse = switchUserTypeResponseComposite & {
  headers: Headers;
};

export const getSwitchUserTypeUrl = (params: SwitchUserTypeParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/users/switch-role?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/users/switch-role`;
};

export const switchUserType = async (
  userTypeRequest: UserTypeRequest,
  params: SwitchUserTypeParams,
  options?: RequestInit,
): Promise<switchUserTypeResponse> => {
  return customFetch<switchUserTypeResponse>(getSwitchUserTypeUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userTypeRequest),
  });
};

/**
 * ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏÉùÏÑ± ÎòêÎäî ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÉùÏÑ±/ÏàòÏ†ï
 */
export type setPasswordResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type setPasswordResponse400 = {
  data: GrobleResponseVoid;
  status: 400;
};

export type setPasswordResponseComposite =
  | setPasswordResponse200
  | setPasswordResponse400;

export type setPasswordResponse = setPasswordResponseComposite & {
  headers: Headers;
};

export const getSetPasswordUrl = (params: SetPasswordParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/users/password?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/users/password`;
};

export const setPassword = async (
  passwordRequest: PasswordRequest,
  params: SetPasswordParams,
  options?: RequestInit,
): Promise<setPasswordResponse> => {
  return customFetch<setPasswordResponse>(getSetPasswordUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(passwordRequest),
  });
};

/**
 * ÌÜ†ÌÅ∞ÏùÑ ÌÜµÌï¥ ÏÉàÎ°úÏö¥ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏÑ§Ï†ïÌï©ÎãàÎã§.
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï
 */
export type resetPasswordResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type resetPasswordResponseComposite = resetPasswordResponse200;

export type resetPasswordResponse = resetPasswordResponseComposite & {
  headers: Headers;
};

export const getResetPasswordUrl = () => {
  return `https://api.dev.groble.im/api/v1/users/password/reset`;
};

export const resetPassword = async (
  passwordChangeRequest: PasswordChangeRequest,
  options?: RequestInit,
): Promise<resetPasswordResponse> => {
  return customFetch<resetPasswordResponse>(getResetPasswordUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(passwordChangeRequest),
  });
};

/**
 * Îì±Î°ùÎêú Ïù¥Î©îÏùºÎ°ú ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï ÎßÅÌÅ¨Î•º Î≥¥ÎÉÖÎãàÎã§.
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï Ïù¥Î©îÏùº ÏöîÏ≤≠
 */
export type requestPasswordResetResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type requestPasswordResetResponseComposite =
  requestPasswordResetResponse200;

export type requestPasswordResetResponse =
  requestPasswordResetResponseComposite & {
    headers: Headers;
  };

export const getRequestPasswordResetUrl = () => {
  return `https://api.dev.groble.im/api/v1/users/password/reset-request`;
};

export const requestPasswordReset = async (
  passwordResetRequest: PasswordResetRequest,
  options?: RequestInit,
): Promise<requestPasswordResetResponse> => {
  return customFetch<requestPasswordResetResponse>(
    getRequestPasswordResetUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(passwordResetRequest),
    },
  );
};

/**
 * ÎãâÎÑ§ÏûÑÏùÑ ÏÉùÏÑ± ÎòêÎäî ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary ÎãâÎÑ§ÏûÑ ÏÉùÏÑ±/ÏàòÏ†ï
 */
export type setNicknameResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type setNicknameResponse400 = {
  data: GrobleResponseNicknameResponse;
  status: 400;
};

export type setNicknameResponseComposite =
  | setNicknameResponse200
  | setNicknameResponse400;

export type setNicknameResponse = setNicknameResponseComposite & {
  headers: Headers;
};

export const getSetNicknameUrl = (params: SetNicknameParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/users/nickname?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/users/nickname`;
};

export const setNickname = async (
  nicknameRequest: NicknameRequest,
  params: SetNicknameParams,
  options?: RequestInit,
): Promise<setNicknameResponse> => {
  return customFetch<setNicknameResponse>(getSetNicknameUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(nicknameRequest),
  });
};

/**
 * ÌöåÏõêÍ∞ÄÏûÖ Ïãú ÌåêÎß§Ïûê ÎòêÎäî Íµ¨Îß§Ïûê Ï§ë ÏÑ†ÌÉùÌï©ÎãàÎã§.
 * @summary ÌöåÏõêÍ∞ÄÏûÖ Ïú†Ìòï ÏÑ†ÌÉù
 */
export type setInitialUserTypeResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type setInitialUserTypeResponse400 = {
  data: GrobleResponseVoid;
  status: 400;
};

export type setInitialUserTypeResponseComposite =
  | setInitialUserTypeResponse200
  | setInitialUserTypeResponse400;

export type setInitialUserTypeResponse = setInitialUserTypeResponseComposite & {
  headers: Headers;
};

export const getSetInitialUserTypeUrl = (params: SetInitialUserTypeParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/users/initial-user-type?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/users/initial-user-type`;
};

export const setInitialUserType = async (
  userTypeRequest: UserTypeRequest,
  params: SetInitialUserTypeParams,
  options?: RequestInit,
): Promise<setInitialUserTypeResponse> => {
  return customFetch<setInitialUserTypeResponse>(
    getSetInitialUserTypeUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(userTypeRequest),
    },
  );
};

/**
 * ÏÇ¨Ïö©ÏûêÍ∞Ä ÎèôÏùòÌïú ÏïΩÍ¥ÄÏùÑ Ï≤†ÌöåÌï©ÎãàÎã§. ÌïÑÏàò ÏïΩÍ¥ÄÏùÄ Ï≤†ÌöåÌï† Ïàò ÏóÜÏäµÎãàÎã§.
 * @summary ÏïΩÍ¥Ä ÎèôÏùò Ï≤†Ìöå
 */
export type withdrawTermsAgreementResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type withdrawTermsAgreementResponse400 = {
  data: GrobleResponseTermsAgreementResponse;
  status: 400;
};

export type withdrawTermsAgreementResponseComposite =
  | withdrawTermsAgreementResponse200
  | withdrawTermsAgreementResponse400;

export type withdrawTermsAgreementResponse =
  withdrawTermsAgreementResponseComposite & {
    headers: Headers;
  };

export const getWithdrawTermsAgreementUrl = (
  params: WithdrawTermsAgreementParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/terms/withdraw?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/terms/withdraw`;
};

export const withdrawTermsAgreement = async (
  termsAgreementRequest: TermsAgreementRequest,
  params: WithdrawTermsAgreementParams,
  options?: RequestInit,
): Promise<withdrawTermsAgreementResponse> => {
  return customFetch<withdrawTermsAgreementResponse>(
    getWithdrawTermsAgreementUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(termsAgreementRequest),
    },
  );
};

/**
 * ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò Í¥ëÍ≥†ÏÑ± Ï†ïÎ≥¥ ÏàòÏã† ÎèôÏùò Ïó¨Î∂ÄÎ•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Í¥ëÍ≥†ÏÑ± Ï†ïÎ≥¥ ÏàòÏã† ÎèôÏùò Ïó¨Î∂Ä Ï°∞Ìöå
 */
export type getAdvertisingAgreementStatusResponse200 = {
  data: GrobleResponseBoolean;
  status: 200;
};

export type getAdvertisingAgreementStatusResponseComposite =
  getAdvertisingAgreementStatusResponse200;

export type getAdvertisingAgreementStatusResponse =
  getAdvertisingAgreementStatusResponseComposite & {
    headers: Headers;
  };

export const getGetAdvertisingAgreementStatusUrl = (
  params: GetAdvertisingAgreementStatusParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/terms/users/me/advertising-agreement?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/terms/users/me/advertising-agreement`;
};

export const getAdvertisingAgreementStatus = async (
  params: GetAdvertisingAgreementStatusParams,
  options?: RequestInit,
): Promise<getAdvertisingAgreementStatusResponse> => {
  return customFetch<getAdvertisingAgreementStatusResponse>(
    getGetAdvertisingAgreementStatusUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò Í¥ëÍ≥†ÏÑ± Ï†ïÎ≥¥ ÏàòÏã† ÎèôÏùò Ïó¨Î∂ÄÎ•º Î≥ÄÍ≤ΩÌï©ÎãàÎã§.
 * @summary Í¥ëÍ≥†ÏÑ± Ï†ïÎ≥¥ ÏàòÏã† ÎèôÏùò Î≥ÄÍ≤Ω
 */
export type updateAdvertisingAgreementStatusResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type updateAdvertisingAgreementStatusResponseComposite =
  updateAdvertisingAgreementStatusResponse200;

export type updateAdvertisingAgreementStatusResponse =
  updateAdvertisingAgreementStatusResponseComposite & {
    headers: Headers;
  };

export const getUpdateAdvertisingAgreementStatusUrl = (
  params: UpdateAdvertisingAgreementStatusParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/terms/users/me/advertising-agreement?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/terms/users/me/advertising-agreement`;
};

export const updateAdvertisingAgreementStatus = async (
  advertisingAgreementRequest: AdvertisingAgreementRequest,
  params: UpdateAdvertisingAgreementStatusParams,
  options?: RequestInit,
): Promise<updateAdvertisingAgreementStatusResponse> => {
  return customFetch<updateAdvertisingAgreementStatusResponse>(
    getUpdateAdvertisingAgreementStatusUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(advertisingAgreementRequest),
    },
  );
};

/**
 * ÏÇ¨Ïö©ÏûêÍ∞Ä ÌöåÏõêÍ∞ÄÏûÖ Í≥ºÏ†ïÏóêÏÑú ÏïΩÍ¥ÄÏóê ÎèôÏùòÌï©ÎãàÎã§.
 * @summary ÌöåÏõêÍ∞ÄÏûÖ ÏïΩÍ¥Ä ÎèôÏùò
 */
export type agreeToTermsResponse200 = {
  data: GrobleResponseTermsAgreementResponse;
  status: 200;
};

export type agreeToTermsResponseComposite = agreeToTermsResponse200;

export type agreeToTermsResponse = agreeToTermsResponseComposite & {
  headers: Headers;
};

export const getAgreeToTermsUrl = (params: AgreeToTermsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/terms/agree?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/terms/agree`;
};

export const agreeToTerms = async (
  termsAgreementRequest: TermsAgreementRequest,
  params: AgreeToTermsParams,
  options?: RequestInit,
): Promise<agreeToTermsResponse> => {
  return customFetch<agreeToTermsResponse>(getAgreeToTermsUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(termsAgreementRequest),
  });
};

/**
 * Ïù¥Î©îÏùºÎ°ú Î∞úÏÜ°Îêú Ïù∏Ï¶ù ÏΩîÎìúÏùò Ïú†Ìö®ÏÑ±ÏùÑ Í≤ÄÏ¶ùÌï©ÎãàÎã§.
 * @summary ÌöåÏõêÍ∞ÄÏûÖ Ïãú Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏΩîÎìú ÌôïÏù∏
 */
export type verifyEmailCodeResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type verifyEmailCodeResponseComposite = verifyEmailCodeResponse200;

export type verifyEmailCodeResponse = verifyEmailCodeResponseComposite & {
  headers: Headers;
};

export const getVerifyEmailCodeUrl = () => {
  return `https://api.dev.groble.im/api/v1/auth/verify-code/sign-up`;
};

export const verifyEmailCode = async (
  verifyEmailCodeRequest: VerifyEmailCodeRequest,
  options?: RequestInit,
): Promise<verifyEmailCodeResponse> => {
  return customFetch<verifyEmailCodeResponse>(getVerifyEmailCodeUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(verifyEmailCodeRequest),
  });
};

/**
 * Ïù¥Î©îÏùº Î≥ÄÍ≤Ω Ïãú Ïù∏Ï¶ù ÏΩîÎìúÏùò Ïú†Ìö®ÏÑ±ÏùÑ Í≤ÄÏ¶ùÌïòÍ≥† Ïù¥Î©îÏùºÏùÑ Î≥ÄÍ≤ΩÌï©ÎãàÎã§.
 * @summary Ïù¥Î©îÏùº Î≥ÄÍ≤Ω Ïãú Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏΩîÎìú ÌôïÏù∏
 */
export type verifyEmailCodeForChangeEmailResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type verifyEmailCodeForChangeEmailResponseComposite =
  verifyEmailCodeForChangeEmailResponse200;

export type verifyEmailCodeForChangeEmailResponse =
  verifyEmailCodeForChangeEmailResponseComposite & {
    headers: Headers;
  };

export const getVerifyEmailCodeForChangeEmailUrl = (
  params: VerifyEmailCodeForChangeEmailParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/auth/verify-code/change-email?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/auth/verify-code/change-email`;
};

export const verifyEmailCodeForChangeEmail = async (
  verifyEmailCodeRequest: VerifyEmailCodeRequest,
  params: VerifyEmailCodeForChangeEmailParams,
  options?: RequestInit,
): Promise<verifyEmailCodeForChangeEmailResponse> => {
  return customFetch<verifyEmailCodeForChangeEmailResponse>(
    getVerifyEmailCodeForChangeEmailUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(verifyEmailCodeRequest),
    },
  );
};

/**
 * ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÏùò Ïù∏Ï¶ù ÌÜ†ÌÅ∞ÏùÑ Í≤ÄÏ¶ùÌïòÍ≥† Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï©ÎãàÎã§.
 * @summary ÌÜ†ÌÅ∞ Í≤ÄÏ¶ù
 */
export type validateTokenResponse200 = {
  data: GrobleResponseSignInResponse;
  status: 200;
};

export type validateTokenResponse401 = {
  data: GrobleResponseSignInResponse;
  status: 401;
};

export type validateTokenResponseComposite =
  | validateTokenResponse200
  | validateTokenResponse401;

export type validateTokenResponse = validateTokenResponseComposite & {
  headers: Headers;
};

export const getValidateTokenUrl = (params: ValidateTokenParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/auth/validate-token?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/auth/validate-token`;
};

export const validateToken = async (
  params: ValidateTokenParams,
  options?: RequestInit,
): Promise<validateTokenResponse> => {
  return customFetch<validateTokenResponse>(getValidateTokenUrl(params), {
    ...options,
    method: "POST",
  });
};

/**
 * ÏÉàÎ°úÏö¥ ÏÇ¨Ïö©ÏûêÎ•º Îì±Î°ùÌïòÍ≥† Ïù∏Ï¶ù ÌÜ†ÌÅ∞ÏùÑ Î∞úÍ∏âÌï©ÎãàÎã§.
 * @summary ÌÜµÌï© ÌöåÏõêÍ∞ÄÏûÖ
 */
export type signUpResponse200 = {
  data: GrobleResponseSignUpResponse;
  status: 200;
};

export type signUpResponseComposite = signUpResponse200;

export type signUpResponse = signUpResponseComposite & {
  headers: Headers;
};

export const getSignUpUrl = () => {
  return `https://api.dev.groble.im/api/v1/auth/sign-up`;
};

export const signUp = async (
  signUpRequest: SignUpRequest,
  options?: RequestInit,
): Promise<signUpResponse> => {
  return customFetch<signUpResponse>(getSignUpUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(signUpRequest),
  });
};

/**
 * Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î°ú Î°úÍ∑∏Ïù∏ÌïòÍ≥† Ïù∏Ï¶ù ÌÜ†ÌÅ∞ÏùÑ Î∞úÍ∏âÌï©ÎãàÎã§.
 * @summary Î°úÍ∑∏Ïù∏
 */
export type signInResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type signInResponse400 = {
  data: GrobleResponseSignInResponse;
  status: 400;
};

export type signInResponseComposite = signInResponse200 | signInResponse400;

export type signInResponse = signInResponseComposite & {
  headers: Headers;
};

export const getSignInUrl = () => {
  return `https://api.dev.groble.im/api/v1/auth/sign-in`;
};

export const signIn = async (
  signInRequest: SignInRequest,
  options?: RequestInit,
): Promise<signInResponse> => {
  return customFetch<signInResponse>(getSignInUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(signInRequest),
  });
};

/**
 * ÏÉàÎ°úÏö¥ ÎπÑÎ∞ÄÎ≤àÌò∏Î°ú Ïû¨ÏÑ§Ï†ïÌï©ÎãàÎã§.
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï
 */
export type resetPassword1Response200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type resetPassword1ResponseComposite = resetPassword1Response200;

export type resetPassword1Response = resetPassword1ResponseComposite & {
  headers: Headers;
};

export const getResetPassword1Url = (params: ResetPassword1Params) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/auth/password/reset?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/auth/password/reset`;
};

export const resetPassword1 = async (
  resetPasswordRequest: ResetPasswordRequest,
  params: ResetPassword1Params,
  options?: RequestInit,
): Promise<resetPassword1Response> => {
  return customFetch<resetPassword1Response>(getResetPassword1Url(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(resetPasswordRequest),
  });
};

/**
 * ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï ÎßÅÌÅ¨Í∞Ä Ìè¨Ìï®Îêú Ïù¥Î©îÏùºÏùÑ Î∞úÏÜ°Ìï©ÎãàÎã§.
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï Ïù¥Î©îÏùº Î∞úÏÜ°
 */
export type requestPasswordReset1Response200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type requestPasswordReset1ResponseComposite =
  requestPasswordReset1Response200;

export type requestPasswordReset1Response =
  requestPasswordReset1ResponseComposite & {
    headers: Headers;
  };

export const getRequestPasswordReset1Url = () => {
  return `https://api.dev.groble.im/api/v1/auth/password/reset-request`;
};

export const requestPasswordReset1 = async (
  emailVerificationRequest: EmailVerificationRequest,
  options?: RequestInit,
): Promise<requestPasswordReset1Response> => {
  return customFetch<requestPasswordReset1Response>(
    getRequestPasswordReset1Url(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(emailVerificationRequest),
    },
  );
};

/**
 * Î°úÍ∑∏ÏïÑÏõÉÏùÑ ÌÜµÌï¥ Ïø†ÌÇ§ÏôÄ ÌÜ†ÌÅ∞ÏùÑ Î¨¥Ìö®ÌôîÌï©ÎãàÎã§.
 * @summary Î°úÍ∑∏ÏïÑÏõÉ
 */
export type logoutResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type logoutResponseComposite = logoutResponse200;

export type logoutResponse = logoutResponseComposite & {
  headers: Headers;
};

export const getLogoutUrl = (params: LogoutParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/auth/logout?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/auth/logout`;
};

export const logout = async (
  params: LogoutParams,
  options?: RequestInit,
): Promise<logoutResponse> => {
  return customFetch<logoutResponse>(getLogoutUrl(params), {
    ...options,
    method: "POST",
  });
};

/**
 * ÏÇ¨Ïö©ÏûêÍ∞Ä Í∏∞ÏûÖÌïú Ïù¥Î©îÏùºÏóê Ïù∏Ï¶ù ÏΩîÎìúÎ•º Î∞úÍ∏âÌï©ÎãàÎã§.
 * @summary ÌÜµÌï© ÌöåÏõêÍ∞ÄÏûÖ Ïù¥Î©îÏùº Ïù∏Ï¶ù
 */
export type sendEmailVerificationForSignUpResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type sendEmailVerificationForSignUpResponseComposite =
  sendEmailVerificationForSignUpResponse200;

export type sendEmailVerificationForSignUpResponse =
  sendEmailVerificationForSignUpResponseComposite & {
    headers: Headers;
  };

export const getSendEmailVerificationForSignUpUrl = () => {
  return `https://api.dev.groble.im/api/v1/auth/email-verification/sign-up`;
};

export const sendEmailVerificationForSignUp = async (
  emailVerificationRequest: EmailVerificationRequest,
  options?: RequestInit,
): Promise<sendEmailVerificationForSignUpResponse> => {
  return customFetch<sendEmailVerificationForSignUpResponse>(
    getSendEmailVerificationForSignUpUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(emailVerificationRequest),
    },
  );
};

/**
 * ÎãâÎÑ§ÏûÑÏù¥ Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§. ÌöåÏõêÍ∞ÄÏûÖ Î∞è ÎãâÎÑ§ÏûÑ ÏàòÏ†ï Ïãú ÏÇ¨Ïö©Îê©ÎãàÎã§.
 * @summary ÎãâÎÑ§ÏûÑ Ï§ëÎ≥µ ÌôïÏù∏
 */
export type checkNicknameDuplicateResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type checkNicknameDuplicateResponse400 = {
  data: GrobleResponseNicknameDuplicateCheckResponse;
  status: 400;
};

export type checkNicknameDuplicateResponseComposite =
  | checkNicknameDuplicateResponse200
  | checkNicknameDuplicateResponse400;

export type checkNicknameDuplicateResponse =
  checkNicknameDuplicateResponseComposite & {
    headers: Headers;
  };

export const getCheckNicknameDuplicateUrl = (
  params: CheckNicknameDuplicateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/users/nickname/check?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/users/nickname/check`;
};

export const checkNicknameDuplicate = async (
  params: CheckNicknameDuplicateParams,
  options?: RequestInit,
): Promise<checkNicknameDuplicateResponse> => {
  return customFetch<checkNicknameDuplicateResponse>(
    getCheckNicknameDuplicateUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * ÎßàÏù¥ÌéòÏù¥ÏßÄ Ï≤´ ÌôîÎ©¥ÏóêÏÑú ÏöîÏïΩ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÎßàÏù¥ÌéòÏù¥ÏßÄ ÏöîÏïΩ Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export type getUserMyPageSummaryResponse200 = {
  data: GrobleResponseUserMyPageSummaryResponse;
  status: 200;
};

export type getUserMyPageSummaryResponseComposite =
  getUserMyPageSummaryResponse200;

export type getUserMyPageSummaryResponse =
  getUserMyPageSummaryResponseComposite & {
    headers: Headers;
  };

export const getGetUserMyPageSummaryUrl = (
  params: GetUserMyPageSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/users/me/summary?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/users/me/summary`;
};

export const getUserMyPageSummary = async (
  params: GetUserMyPageSummaryParams,
  options?: RequestInit,
): Promise<getUserMyPageSummaryResponse> => {
  return customFetch<getUserMyPageSummaryResponse>(
    getGetUserMyPageSummaryUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * ÎßàÏù¥ÌéòÏù¥ÏßÄÏóêÏÑú ÏÇ¨Ïö©Ïûê ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÎßàÏù¥ÌéòÏù¥ÏßÄ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export type getUserMyPageDetailResponse200 = {
  data: GrobleResponseUserMyPageDetailResponse;
  status: 200;
};

export type getUserMyPageDetailResponseComposite =
  getUserMyPageDetailResponse200;

export type getUserMyPageDetailResponse =
  getUserMyPageDetailResponseComposite & {
    headers: Headers;
  };

export const getGetUserMyPageDetailUrl = (
  params: GetUserMyPageDetailParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/users/me/detail?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/users/me/detail`;
};

export const getUserMyPageDetail = async (
  params: GetUserMyPageDetailParams,
  options?: RequestInit,
): Promise<getUserMyPageDetailResponse> => {
  return customFetch<getUserMyPageDetailResponse>(
    getGetUserMyPageDetailUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * ÏÇ¨Ïö©ÏûêÏùò ÏïΩÍ¥Ä ÎèôÏùò ÏÉÅÌÉúÎ•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©Ïûê ÏïΩÍ¥Ä ÎèôÏùò ÏÉÅÌÉú Ï°∞Ìöå
 */
export type getUserTermsAgreementsResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type getUserTermsAgreementsResponseComposite =
  getUserTermsAgreementsResponse200;

export type getUserTermsAgreementsResponse =
  getUserTermsAgreementsResponseComposite & {
    headers: Headers;
  };

export const getGetUserTermsAgreementsUrl = (
  params: GetUserTermsAgreementsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/terms/user?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/terms/user`;
};

export const getUserTermsAgreements = async (
  params: GetUserTermsAgreementsParams,
  options?: RequestInit,
): Promise<getUserTermsAgreementsResponse> => {
  return customFetch<getUserTermsAgreementsResponse>(
    getGetUserTermsAgreementsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * ÌòÑÏû¨ Ïú†Ìö®Ìïú ÏµúÏã† Î≤ÑÏ†ÑÏùò ÏïΩÍ¥Ä Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÌòÑÏû¨ Ïú†Ìö®Ìïú ÏïΩÍ¥Ä Î™©Î°ù Ï°∞Ìöå
 */
export type getActiveTermsResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type getActiveTermsResponseComposite = getActiveTermsResponse200;

export type getActiveTermsResponse = getActiveTermsResponseComposite & {
  headers: Headers;
};

export const getGetActiveTermsUrl = () => {
  return `https://api.dev.groble.im/api/v1/terms/active`;
};

export const getActiveTerms = async (
  options?: RequestInit,
): Promise<getActiveTermsResponse> => {
  return customFetch<getActiveTermsResponse>(getGetActiveTermsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * ÏÜåÏÖú Î°úÍ∑∏Ïù∏ ÏãúÏûë Ï†Ñ Î¶¨Îã§Ïù¥Î†âÌä∏ URIÎ•º ÏÑ§Ï†ïÌï©ÎãàÎã§.
 * @summary OAuth2 Î°úÍ∑∏Ïù∏ ÏãúÏûë
 */
export type authorizeResponse200 = {
  data: void;
  status: 200;
};

export type authorizeResponseComposite = authorizeResponse200;

export type authorizeResponse = authorizeResponseComposite & {
  headers: Headers;
};

export const getAuthorizeUrl = (params: AuthorizeParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/oauth2/authorize?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/oauth2/authorize`;
};

export const authorize = async (
  params: AuthorizeParams,
  options?: RequestInit,
): Promise<authorizeResponse> => {
  return customFetch<authorizeResponse>(getAuthorizeUrl(params), {
    ...options,
    method: "GET",
  });
};
