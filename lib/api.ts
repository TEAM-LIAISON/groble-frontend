/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Groble API
 * Groble 서비스의 API 명세서입니다.
 * OpenAPI spec version: v1.0.0
 */
import { customFetch } from "./custom-fetch";
/**
 * 에러 상세 정보
 */
export interface ErrorDetail {
  code?: string;
  message?: string;
  exception?: string;
  field?: string;
  trace?: string;
}

/**
 * 응답 상태 타입
 */
export type GrobleResponseStatus =
  (typeof GrobleResponseStatus)[keyof typeof GrobleResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

/**
 * 응답 데이터 (요청 성공 시)
 */
export type GrobleResponseData = { [key: string]: unknown };

/**
 * 공통 응답 형식
 */
export interface GrobleResponse {
  /** 응답 상태 타입 */
  status?: GrobleResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  /** 응답 데이터 (요청 성공 시) */
  data?: GrobleResponseData;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

export interface ContentExamineRequest {
  /** 심사 액션 (APPROVE: 승인, REJECT: 반려) */
  action?: string;
  /** 반려 사유 (반려 시에만 필요) */
  rejectReason?: string;
}

/**
 * 응답 상태 타입
 */
export type ContentExamineApiResponseStatus =
  (typeof ContentExamineApiResponseStatus)[keyof typeof ContentExamineApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContentExamineApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

/**
 * 응답 데이터 (요청 성공 시)
 */
export type ContentExamineApiResponseData = { [key: string]: unknown };

export interface ContentExamineApiResponse {
  /** 응답 상태 타입 */
  status?: ContentExamineApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  /** 응답 데이터 (요청 성공 시) */
  data?: ContentExamineApiResponseData;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

export interface Accessor {
  id?: number;
  email?: string;
  roles?: string[];
  userType?: string;
  accountType?: string;
  userId?: number;
}

export interface UserTypeRequest {
  /** @pattern ^(SELLER|BUYER)$ */
  userType: string;
}

/**
 * 응답 상태 타입
 */
export type UserSwitchRoleApiResponseStatus =
  (typeof UserSwitchRoleApiResponseStatus)[keyof typeof UserSwitchRoleApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserSwitchRoleApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

/**
 * 응답 데이터 (요청 성공 시)
 */
export type UserSwitchRoleApiResponseData = { [key: string]: unknown };

export interface UserSwitchRoleApiResponse {
  /** 응답 상태 타입 */
  status?: UserSwitchRoleApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  /** 응답 데이터 (요청 성공 시) */
  data?: UserSwitchRoleApiResponseData;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 응답 상태 타입
 */
export type FileUploadApiResponseStatus =
  (typeof FileUploadApiResponseStatus)[keyof typeof FileUploadApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FileUploadApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface FileUploadApiResponse {
  /** 응답 상태 타입 */
  status?: FileUploadApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  data?: FileUploadResponse;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 응답 데이터 (요청 성공 시)
 */
export interface FileUploadResponse {
  /** 원본 파일 이름 */
  originalFileName?: string;
  /** 파일 URL */
  fileUrl?: string;
  /** 파일 MIME 타입 */
  contentType?: string;
  /** 파일 저장 경로 */
  directory?: string;
}

export type TermsAgreementRequestTermsTypesItem =
  (typeof TermsAgreementRequestTermsTypesItem)[keyof typeof TermsAgreementRequestTermsTypesItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TermsAgreementRequestTermsTypesItem = {
  AGE_POLICY: "AGE_POLICY",
  SELLER_TERMS_POLICY: "SELLER_TERMS_POLICY",
  PRIVACY_POLICY: "PRIVACY_POLICY",
  SERVICE_TERMS_POLICY: "SERVICE_TERMS_POLICY",
  SALES_TERMS_POLICY: "SALES_TERMS_POLICY",
  MARKETING_POLICY: "MARKETING_POLICY",
  ADVERTISING_POLICY: "ADVERTISING_POLICY",
} as const;

export interface TermsAgreementRequest {
  termsTypes: TermsAgreementRequestTermsTypesItem[];
}

export interface AdvertisingAgreementRequest {
  agreed: boolean;
}

/**
 * 코칭 옵션 목록 (contentType이 COACHING인 경우)
 */
export interface CoachingOptionRegisterRequest {
  /** 옵션 이름 */
  name: string;
  /** 옵션 설명 */
  description: string;
  /**
   * 가격
   * @minimum 0
   */
  price: number;
  /**
   * 코칭 기간 [ONE_DAY - 1일], [TWO_TO_SIX_DAYS - 2-6일], [MORE_THAN_ONE_WEEK - 일주일 이상]
   * @pattern ^(ONE_DAY|TWO_TO_SIX_DAYS|MORE_THAN_ONE_WEEK)$
   */
  coachingPeriod: string;
  /**
   * 자료 제공 여부 [PROVIDED - 제공], [NOT_PROVIDED - 미제공]
   * @pattern ^(PROVIDED|NOT_PROVIDED)$
   */
  documentProvision: string;
  /**
   * 코칭 방식 [ONLINE - 온라인], [OFFLINE - 오프라인]
   * @pattern ^(ONLINE|OFFLINE)$
   */
  coachingType: string;
  /** 코칭 방식 설명 */
  coachingTypeDescription: string;
}

export interface ContentRegisterRequest {
  /** 콘텐츠 ID */
  contentId?: number;
  /**
   * 콘텐츠 이름
   * @minLength 0
   * @maxLength 30
   */
  title: string;
  /**
   * 콘텐츠 유형
   * @pattern ^(COACHING|DOCUMENT)$
   */
  contentType: string;
  /** 카테고리 ID */
  categoryId: number;
  /** 썸네일 이미지 URL */
  thumbnailUrl: string;
  /** 코칭 옵션 목록 (contentType이 COACHING인 경우) */
  coachingOptions?: CoachingOptionRegisterRequest[];
  /** 문서 옵션 목록 (contentType이 DOCUMENT인 경우) */
  documentOptions?: DocumentOptionRegisterRequest[];
  /** 콘텐츠 소개 */
  contentIntroduction: string;
  /** 콘텐츠 상세 이미지 URL 목록 */
  contentDetailImageUrls: string[];
  /** 서비스 타겟 */
  serviceTarget: string;
  /** 제공 절차 */
  serviceProcess: string;
  /** 메이커 소개 */
  makerIntro: string;
}

/**
 * 문서 옵션 목록 (contentType이 DOCUMENT인 경우)
 */
export interface DocumentOptionRegisterRequest {
  /** 옵션 이름 */
  name: string;
  /** 옵션 설명 */
  description: string;
  /**
   * 가격
   * @minimum 0
   */
  price: number;
  /**
   * 콘텐츠 제공 방식 [IMMEDIATE_DOWNLOAD - 즉시 업로드], [FUTURE_UPLOAD - 추후 업로드]
   * @pattern ^(IMMEDIATE_DOWNLOAD|FUTURE_UPLOAD)$
   */
  contentDeliveryMethod: string;
}

/**
 * 응답 상태 타입
 */
export type ContentRegisterApiResponseStatus =
  (typeof ContentRegisterApiResponseStatus)[keyof typeof ContentRegisterApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContentRegisterApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface ContentRegisterApiResponse {
  /** 응답 상태 타입 */
  status?: ContentRegisterApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  data?: ContentResponse;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 응답 데이터 (요청 성공 시)
 */
export interface ContentResponse {
  /** 콘텐츠 ID */
  id?: number;
  /** 콘텐츠 이름 */
  title?: string;
  /** 콘텐츠 유형 [COACHING - 코칭], [DOCUMENT - 자료] */
  contentType?: string;
  /** 카테고리 ID */
  categoryId?: number;
  /** 썸네일 이미지 URL */
  thumbnailUrl?: string;
  /** 콘텐츠 상태 */
  status?: string;
  /** 옵션 목록 */
  options?: OptionResponse[];
  /** 콘텐츠 소개 */
  contentIntroduction?: string;
  /** 콘텐츠 상세 이미지 URL 목록 */
  contentDetailImageUrls?: string[];
  /** 서비스 타겟 */
  serviceTarget?: string;
  /** 제공 절차 */
  serviceProcess?: string;
  /** 메이커 소개 */
  makerIntro?: string;
}

/**
 * 옵션 목록
 */
export interface OptionResponse {
  /** 옵션 ID */
  id?: number;
  /** 옵션 이름 */
  name?: string;
  /** 옵션 설명 */
  description?: string;
  /** 가격 */
  price?: number;
  /** 코칭 기간 */
  coachingPeriod?: string;
  /** 자료 제공 여부 */
  documentProvision?: string;
  /** 코칭 방식 */
  coachingType?: string;
  /** 코칭 방식 설명 */
  coachingTypeDescription?: string;
  /** 콘텐츠 제공 방식 */
  contentDeliveryMethod?: string;
}

/**
 * 코칭 옵션 목록 (contentType이 COACHING인 경우)
 */
export interface CoachingOptionDraftRequest {
  /** 옵션 이름 */
  name?: string;
  /** 옵션 설명 */
  description?: string;
  /**
   * 가격
   * @minimum 0
   */
  price?: number;
  /**
   * 코칭 기간 [ONE_DAY - 1일], [TWO_TO_SIX_DAYS - 2-6일], [MORE_THAN_ONE_WEEK - 일주일 이상]
   * @pattern ^(ONE_DAY|TWO_TO_SIX_DAYS|MORE_THAN_ONE_WEEK)$
   */
  coachingPeriod?: string;
  /**
   * 자료 제공 여부 [PROVIDED - 제공], [NOT_PROVIDED - 미제공]
   * @pattern ^(PROVIDED|NOT_PROVIDED)$
   */
  documentProvision?: string;
  /**
   * 코칭 방식 [ONLINE - 온라인], [OFFLINE - 오프라인]
   * @pattern ^(ONLINE|OFFLINE)$
   */
  coachingType?: string;
  /** 코칭 방식 설명 */
  coachingTypeDescription?: string;
}

export interface ContentDraftRequest {
  /** 콘텐츠 ID */
  contentId?: number;
  /**
   * 콘텐츠 이름
   * @minLength 0
   * @maxLength 30
   */
  title?: string;
  /**
   * 콘텐츠 유형
   * @pattern ^(COACHING|DOCUMENT)$
   */
  contentType?: string;
  /** 카테고리 ID */
  categoryId?: number;
  /** 썸네일 이미지 URL */
  thumbnailUrl?: string;
  /** 코칭 옵션 목록 (contentType이 COACHING인 경우) */
  coachingOptions?: CoachingOptionDraftRequest[];
  /** 문서 옵션 목록 (contentType이 DOCUMENT인 경우) */
  documentOptions?: DocumentOptionDraftRequest[];
  /** 콘텐츠 소개 */
  contentIntroduction?: string;
  /** 콘텐츠 상세 이미지 URL 목록 */
  contentDetailImageUrls?: string[];
  /** 서비스 타겟 */
  serviceTarget?: string;
  /** 제공 절차 */
  serviceProcess?: string;
  /** 메이커 소개 */
  makerIntro?: string;
}

/**
 * 문서 옵션 목록 (contentType이 DOCUMENT인 경우)
 */
export interface DocumentOptionDraftRequest {
  /** 옵션 이름 */
  name?: string;
  /** 옵션 설명 */
  description?: string;
  /**
   * 가격
   * @minimum 0
   */
  price?: number;
  /**
   * 콘텐츠 제공 방식 [IMMEDIATE_DOWNLOAD - 즉시 업로드], [FUTURE_UPLOAD - 추후 업로드]
   * @pattern ^(IMMEDIATE_DOWNLOAD|FUTURE_UPLOAD)$
   */
  contentDeliveryMethod?: string;
}

/**
 * 응답 상태 타입
 */
export type ContentDraftApiResponseStatus =
  (typeof ContentDraftApiResponseStatus)[keyof typeof ContentDraftApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContentDraftApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface ContentDraftApiResponse {
  /** 응답 상태 타입 */
  status?: ContentDraftApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  data?: ContentResponse;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

export interface UpdateContentScrapStateRequest {
  /** 스크랩 상태 변경 여부 (true : 스크랩된 상태로 변경됩니다. false : 스크랩 취소 상태로 변경됩니다.) */
  changeScrapValue?: boolean;
}

/**
 * 응답 상태 타입
 */
export type UpdateContentScrapStateApiResponseStatus =
  (typeof UpdateContentScrapStateApiResponseStatus)[keyof typeof UpdateContentScrapStateApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateContentScrapStateApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface UpdateContentScrapStateApiResponse {
  /** 응답 상태 타입 */
  status?: UpdateContentScrapStateApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  data?: UpdateContentScrapStateResponse;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 응답 데이터 (요청 성공 시)
 */
export interface UpdateContentScrapStateResponse {
  /** 콘텐츠 ID */
  contentId?: number;
  /** 콘텐츠 스크랩 상태 (true : 스크랩된 상태로 변경되었습니다. false : 스크랩 취소 상태로 변경되었습니다.) */
  isContentScrap?: boolean;
}

export interface CardOptions {
  installment?: number;
  useCardPoint?: boolean;
  useInternationalCard?: boolean;
}

export type PaymentPrepareRequestAdditionalOptions = {
  [key: string]: { [key: string]: unknown };
};

export interface PaymentPrepareRequest {
  orderId: number;
  paymentMethod: string;
  orderName?: string;
  amount?: number;
  customerName?: string;
  customerEmail?: string;
  customerPhone?: string;
  successUrl?: string;
  failUrl?: string;
  pgProvider?: string;
  cardOptions?: CardOptions;
  virtualAccountOptions?: VirtualAccountOptions;
  additionalOptions?: PaymentPrepareRequestAdditionalOptions;
}

export interface VirtualAccountOptions {
  bankCode?: string;
  validHours?: number;
  cashReceiptType?: string;
}

export interface PaymentApproveRequest {
  paymentKey: string;
  merchantUid: string;
  amount: number;
}

export interface CreateOrderRequest {
  contentId?: number;
  contentOptionId?: number;
  price?: number;
  quantity?: number;
  totalPrice?: number;
}

/**
 * 주문 응답 DTO
 */
export interface OrderResponse {
  orderId?: number;
}

/**
 * 응답 상태 타입
 */
export type MultipleFilesUploadApiResponseStatus =
  (typeof MultipleFilesUploadApiResponseStatus)[keyof typeof MultipleFilesUploadApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MultipleFilesUploadApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface MultipleFilesUploadApiResponse {
  /** 응답 상태 타입 */
  status?: MultipleFilesUploadApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  /** 응답 데이터 (요청 성공 시) */
  data?: FileUploadResponse[];
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 응답 상태 타입
 */
export type MultiFileUploadApiResponseStatus =
  (typeof MultiFileUploadApiResponseStatus)[keyof typeof MultiFileUploadApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MultiFileUploadApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

/**
 * 여러 개 파일 업로드 응답
 */
export interface MultiFileUploadApiResponse {
  /** 응답 상태 타입 */
  status?: MultiFileUploadApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  /** 응답 데이터 (요청 성공 시) */
  data?: FileUploadResponse[];
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 탈퇴 사유
 */
export type UserWithdrawalRequestReason =
  (typeof UserWithdrawalRequestReason)[keyof typeof UserWithdrawalRequestReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserWithdrawalRequestReason = {
  NOT_USING: "NOT_USING",
  INCONVENIENT: "INCONVENIENT",
  LACKS_CONTENT: "LACKS_CONTENT",
  BAD_EXPERIENCE: "BAD_EXPERIENCE",
  COST_BURDEN: "COST_BURDEN",
  OTHER: "OTHER",
} as const;

/**
 * 회원 탈퇴 요청
 */
export interface UserWithdrawalRequest {
  /** 탈퇴 사유 */
  reason: UserWithdrawalRequestReason;
  /** 추가 의견 (선택사항) */
  additionalComment?: string;
}

/**
 * 이메일 인증 코드 검증 요청
 */
export interface VerifyEmailCodeRequest {
  /** 사용자 이메일 */
  email: string;
  /**
   * 이메일로 발송된 인증 코드
   * @minLength 4
   * @maxLength 4
   */
  verificationCode: string;
}

export interface NicknameRequest {
  /**
   * 닉네임
   * @pattern ^[가-힣a-zA-Z0-9]{2,15}$
   */
  nickname: string;
}

/**
 * 약관 동의 유형
 */
export type SignUpRequestTermsTypesItem =
  (typeof SignUpRequestTermsTypesItem)[keyof typeof SignUpRequestTermsTypesItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SignUpRequestTermsTypesItem = {
  AGE_POLICY: "AGE_POLICY",
  SELLER_TERMS_POLICY: "SELLER_TERMS_POLICY",
  PRIVACY_POLICY: "PRIVACY_POLICY",
  SERVICE_TERMS_POLICY: "SERVICE_TERMS_POLICY",
  SALES_TERMS_POLICY: "SALES_TERMS_POLICY",
  MARKETING_POLICY: "MARKETING_POLICY",
  ADVERTISING_POLICY: "ADVERTISING_POLICY",
  ACTIVE: "ACTIVE",
  DRAFT: "DRAFT",
  PENDING: "PENDING",
  VALIDATED: "VALIDATED",
  REJECTED: "REJECTED",
} as const;

/**
 * 회원가입 정보
 */
export interface SignUpRequest {
  /**
   * 사용자 유형
   * @pattern ^(SELLER|BUYER)$
   */
  userType: string;
  /** 약관 동의 유형 */
  termsTypes: SignUpRequestTermsTypesItem[];
  /** 인증된 이메일 */
  email: string;
  /**
   * 비밀번호
   * @minLength 8
   * @maxLength 32
   * @pattern ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{8,}$
   */
  password: string;
  /**
   * 닉네임
   * @pattern ^[가-힣a-zA-Z0-9]{2,15}$
   */
  nickname: string;
}

/**
 * 응답 상태 타입
 */
export type SignUpApiResponseStatus =
  (typeof SignUpApiResponseStatus)[keyof typeof SignUpApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SignUpApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface SignUpApiResponse {
  /** 응답 상태 타입 */
  status?: SignUpApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  data?: SignUpResponse;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 응답 데이터 (요청 성공 시)
 */
export interface SignUpResponse {
  /** 회원가입을 진행한 이메일 */
  email?: string;
  /** 회원가입 성공 여부 */
  authenticated?: boolean;
}

/**
 * 회원가입 정보
 */
export interface DeprecatedSignUpRequest {
  email: string;
  /**
   * @minLength 8
   * @maxLength 32
   * @pattern ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{8,}$
   */
  password: string;
}

/**
 * 로그인 정보
 */
export interface SignInRequest {
  /** 사용자 이메일 */
  email: string;
  /**
   * 사용자 비밀번호
   * @minLength 6
   * @maxLength 32
   * @pattern ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{6,}$
   */
  password: string;
}

export interface ResetPasswordRequest {
  /**
   * @minLength 8
   * @maxLength 32
   * @pattern ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{8,}$
   */
  newPassword: string;
  token: string;
}

/**
 * 이메일 인증 정보
 */
export interface EmailVerificationRequest {
  email: string;
}

export interface VirtualAccountRequest {
  orderId: number;
  bankCode: string;
  dueDate: string;
}

export interface PaymentCancelRequest {
  paymentKey: string;
  amount: number;
  reason: string;
}

/**
 * 응답 상태 타입
 */
export type UserMyPageSummaryApiResponseStatus =
  (typeof UserMyPageSummaryApiResponseStatus)[keyof typeof UserMyPageSummaryApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserMyPageSummaryApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface UserMyPageSummaryApiResponse {
  /** 응답 상태 타입 */
  status?: UserMyPageSummaryApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  data?: UserMyPageSummaryResponse;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 마이페이지 요약 정보 응답
 */
export interface UserMyPageSummaryResponse {
  /** 사용자 닉네임 */
  nickname?: string;
  /** 프로필 이미지 URL */
  profileImageUrl?: string;
  /** 사용자 유형 (BUYER/SELLER) */
  userType?: string;
  /** 판매자 전환 가능 여부 */
  canSwitchToSeller?: boolean;
  /** 판매자 인증 상태 */
  verificationStatus?: string;
}

/**
 * 응답 상태 타입
 */
export type UserMyPageDetailApiResponseStatus =
  (typeof UserMyPageDetailApiResponseStatus)[keyof typeof UserMyPageDetailApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserMyPageDetailApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface UserMyPageDetailApiResponse {
  /** 응답 상태 타입 */
  status?: UserMyPageDetailApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  data?: UserMyPageDetailResponse;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 응답 데이터 (요청 성공 시)
 */
export interface UserMyPageDetailResponse {
  /** 사용자 닉네임 */
  nickname?: string;
  /** 사용자 마지막 선택 유형 */
  userType?: string;
  /** 사용자 계정 유형 (INTEGRATED: 통합 계정, SOCIAL: 소셜 계정) */
  accountType?: string;
  /** 소셜 플랫폼 유형 (가능한 값: KAKAO - 카카오, NAVER - 네이버, GOOGLE - 구글) */
  providerType?: string;
  /** 이메일 */
  email?: string;
  /** 프로필 이미지 URL */
  profileImageUrl?: string;
  /** 전화번호 */
  phoneNumber?: string;
  /** 판매자 계정 미생성 여부 */
  sellerAccountNotCreated?: boolean;
}

/**
 * 응답 상태 타입
 */
export type ContentExamineRejectApiResponseStatus =
  (typeof ContentExamineRejectApiResponseStatus)[keyof typeof ContentExamineRejectApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContentExamineRejectApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface ContentExamineRejectApiResponse {
  /** 응답 상태 타입 */
  status?: ContentExamineRejectApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  /** 응답 데이터 (요청 성공 시) */
  data?: string;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 커서 기반 페이지네이션 요청
 */
export interface CursorRequest {
  /** 다음 페이지 요청에 사용할 커서 (첫 페이지는 null 또는 빈 문자열) */
  cursor?: string;
  /**
   * 요청 페이지 크기 (최소 1)
   * @minimum 1
   */
  size: number;
  /** 정렬 기준 필드명 */
  sortBy?: string;
  /** 내림차순 정렬 여부 (true: 내림차순, false: 오름차순) */
  sortDesc?: boolean;
  first?: boolean;
}

/**
 * 콘텐츠 상태 [ACTIVE - 판매중], [DRAFT - 작성중], [PENDING - 심사중], [VALIDATED - 심사완료(승인)], [REJECTED - 심사완료(거절)]
 */
export type ContentPreviewCardResponseStatus =
  (typeof ContentPreviewCardResponseStatus)[keyof typeof ContentPreviewCardResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContentPreviewCardResponseStatus = {
  ACTIVE: "ACTIVE",
  DRAFT: "DRAFT",
  PENDING: "PENDING",
  VALIDATED: "VALIDATED",
  REJECTED: "REJECTED",
} as const;

/**
 * 콘텐츠 미리보기 카드 응답 DTO
 */
export interface ContentPreviewCardResponse {
  /** 콘텐츠 ID */
  contentId?: number;
  /** 생성 일시 */
  createdAt?: string;
  /** 콘텐츠 제목 */
  title?: string;
  /** 썸네일 이미지 URL */
  thumbnailUrl?: string;
  /** 판매자 이름 */
  sellerName?: string;
  /** 콘텐츠 최저가 가격 (null인 경우 -> 가격미정) */
  lowestPrice?: number;
  /** 콘텐츠 상태 [ACTIVE - 판매중], [DRAFT - 작성중], [PENDING - 심사중], [VALIDATED - 심사완료(승인)], [REJECTED - 심사완료(거절)] */
  status?: ContentPreviewCardResponseStatus;
}

/**
 * 응답 데이터 (요청 성공 시)
 */
export interface CursorResponseContentPreviewCardResponse {
  items?: ContentPreviewCardResponse[];
  nextCursor?: string;
  hasNext?: boolean;
  totalCount?: number;
  meta?: MetaData;
}

export interface MetaData {
  searchTerm?: string;
  filter?: string;
  sortBy?: string;
  sortDirection?: string;
  categoryIds?: string[];
}

/**
 * 응답 상태 타입
 */
export type MySellingContentsApiResponseStatus =
  (typeof MySellingContentsApiResponseStatus)[keyof typeof MySellingContentsApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MySellingContentsApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface MySellingContentsApiResponse {
  /** 응답 상태 타입 */
  status?: MySellingContentsApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  data?: CursorResponseContentPreviewCardResponse;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 응답 상태 타입
 */
export type ContentScrapCardApiResponseStatus =
  (typeof ContentScrapCardApiResponseStatus)[keyof typeof ContentScrapCardApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContentScrapCardApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

/**
 * 스크랩한 콘텐츠 목록 조회 응답
 */
export interface ContentScrapCardApiResponse {
  /** 응답 상태 타입 */
  status?: ContentScrapCardApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  data?: CursorResponseContentScrapCardResponse;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 콘텐츠 스크랩용 카드 응답 DTO
 */
export interface ContentScrapCardResponse {
  /** 콘텐츠 ID */
  contentId?: number;
  /** 콘텐츠 유형 [COACHING - 코칭], [DOCUMENT - 자료] */
  contentType?: string;
  /** 콘텐츠 제목 */
  title?: string;
  /** 썸네일 이미지 URL */
  thumbnailUrl?: string;
  /** 판매자 이름 */
  sellerName?: string;
  /** 콘텐츠 스크랩 여부 */
  isContentScrap?: boolean;
}

/**
 * 응답 데이터 (요청 성공 시)
 */
export interface CursorResponseContentScrapCardResponse {
  items?: ContentScrapCardResponse[];
  nextCursor?: string;
  hasNext?: boolean;
  totalCount?: number;
  meta?: MetaData;
}

/**
 * 알림 상세 응답
 */
export interface NotificationDetails {
  /** 닉네임 */
  nickname?: string;
  /** 판매자 인증 여부 (SELLER 타입에서 사용) */
  isVerified?: boolean;
  /** 콘텐츠 ID (CONTENT 타입에서 사용) */
  contentId?: number;
  /** 썸네일 URL (CONTENT 타입에서 사용) */
  thumbnailUrl?: string;
  /** 콘텐츠 승인 여부 (CONTENT 타입에서 사용) */
  isContentApproved?: boolean;
  /** 시스템 알림 제목 (SYSTEM 타입에서 사용) */
  systemTitle?: string;
}

/**
 * 알림 타입
 */
export type NotificationItemNotificationType =
  (typeof NotificationItemNotificationType)[keyof typeof NotificationItemNotificationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationItemNotificationType = {
  SELLER: "SELLER",
  CONTENT: "CONTENT",
  SYSTEM: "SYSTEM",
} as const;

/**
 * 알림 서브 타입
 */
export type NotificationItemSubNotificationType =
  (typeof NotificationItemSubNotificationType)[keyof typeof NotificationItemSubNotificationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationItemSubNotificationType = {
  SELLER_VERIFIED: "SELLER_VERIFIED",
  SELLER_REJECTED: "SELLER_REJECTED",
  CONTENT_APPROVED: "CONTENT_APPROVED",
  CONTENT_REJECTED: "CONTENT_REJECTED",
  WELCOME_GROBLE: "WELCOME_GROBLE",
} as const;

/**
 * 알림 읽음 상태
 */
export type NotificationItemNotificationReadStatus =
  (typeof NotificationItemNotificationReadStatus)[keyof typeof NotificationItemNotificationReadStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationItemNotificationReadStatus = {
  READ: "READ",
  UNREAD: "UNREAD",
} as const;

/**
 * 알림 아이템
 */
export interface NotificationItem {
  /** 알림 ID */
  notificationId?: number;
  /** 알림 타입 */
  notificationType?: NotificationItemNotificationType;
  /** 알림 서브 타입 */
  subNotificationType?: NotificationItemSubNotificationType;
  /** 알림 읽음 상태 */
  notificationReadStatus?: NotificationItemNotificationReadStatus;
  /** 알림 발생 시간 (상대적 시간 표시, 예: '3일 전') */
  notificationOccurTime?: string;
  notificationDetails?: NotificationDetails;
}

/**
 * 알림 목록 응답
 */
export interface NotificationItems {
  /** 알림 목록 리스트 */
  notificationItems?: NotificationItem[];
}

/**
 * 응답 상태 타입
 */
export type NotificationItemsApiResponseStatus =
  (typeof NotificationItemsApiResponseStatus)[keyof typeof NotificationItemsApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationItemsApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface NotificationItemsApiResponse {
  /** 응답 상태 타입 */
  status?: NotificationItemsApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  data?: NotificationItems;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 응답 상태 타입
 */
export type UserHeaderApiResponseStatus =
  (typeof UserHeaderApiResponseStatus)[keyof typeof UserHeaderApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserHeaderApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface UserHeaderApiResponse {
  /** 응답 상태 타입 */
  status?: UserHeaderApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  data?: UserHeaderResponse;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 응답 데이터 (요청 성공 시)
 */
export interface UserHeaderResponse {
  /** 로그인 상태 여부 */
  isLogin?: boolean;
  /** 사용자 닉네임 */
  nickname?: string;
  /** 프로필 이미지 URL */
  profileImageUrl?: string;
  /** 판매자 전환 가능 여부 */
  canSwitchToSeller?: boolean;
  /** 읽지 않은 알림 개수 */
  unreadNotificationCount?: number;
}

/**
 * 응답 상태 타입
 */
export type HomeContentsApiResponseStatus =
  (typeof HomeContentsApiResponseStatus)[keyof typeof HomeContentsApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HomeContentsApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface HomeContentsApiResponse {
  /** 응답 상태 타입 */
  status?: HomeContentsApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  data?: HomeContentsResponse;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 응답 데이터 (요청 성공 시)
 */
export interface HomeContentsResponse {
  coachingItems?: ContentPreviewCardResponse[];
  documentItems?: ContentPreviewCardResponse[];
}

/**
 * 응답 상태 타입
 */
export type ContentsCategoryApiResponseStatus =
  (typeof ContentsCategoryApiResponseStatus)[keyof typeof ContentsCategoryApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContentsCategoryApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface ContentsCategoryApiResponse {
  /** 응답 상태 타입 */
  status?: ContentsCategoryApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  data?: PageResponseContentPreviewCardResponse;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

export interface PageInfo {
  currentPage?: number;
  totalPages?: number;
  pageSize?: number;
  totalElements?: number;
  first?: boolean;
  last?: boolean;
  empty?: boolean;
}

/**
 * 응답 데이터 (요청 성공 시)
 */
export interface PageResponseContentPreviewCardResponse {
  items?: ContentPreviewCardResponse[];
  pageInfo?: PageInfo;
  meta?: MetaData;
}

/**
 * 응답 상태 타입
 */
export type ContentDetailApiResponseStatus =
  (typeof ContentDetailApiResponseStatus)[keyof typeof ContentDetailApiResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContentDetailApiResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface ContentDetailApiResponse {
  /** 응답 상태 타입 */
  status?: ContentDetailApiResponseStatus;
  /** HTTP 상태 코드 또는 커스텀 코드 */
  code?: number;
  /** 응답 메시지 */
  message?: string;
  data?: ContentDetailResponse;
  error?: ErrorDetail;
  /** 응답 생성 시간 */
  timestamp?: string;
}

/**
 * 콘텐츠 상태 [ACTIVE - 판매중], [DRAFT - 작성중], [PENDING - 심사중], [VALIDATED - 심사완료(승인)], [REJECTED - 심사완료(거절)]
 */
export type ContentDetailResponseStatus =
  (typeof ContentDetailResponseStatus)[keyof typeof ContentDetailResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContentDetailResponseStatus = {
  ACTIVE: "ACTIVE",
  DRAFT: "DRAFT",
  PENDING: "PENDING",
  VALIDATED: "VALIDATED",
  REJECTED: "REJECTED",
} as const;

/**
 * 콘텐츠 상세 정보 응답
 */
export interface ContentDetailResponse {
  /** 콘텐츠 ID */
  contentId?: number;
  /** 콘텐츠 상태 [ACTIVE - 판매중], [DRAFT - 작성중], [PENDING - 심사중], [VALIDATED - 심사완료(승인)], [REJECTED - 심사완료(거절)] */
  status?: ContentDetailResponseStatus;
  /** 썸네일 이미지 URL */
  thumbnailUrl?: string;
  /** 콘텐츠 유형 [COACHING - 코칭], [DOCUMENT - 자료] */
  contentType?: string;
  /** 카테고리 ID */
  categoryId?: number;
  /** 콘텐츠 이름 */
  title?: string;
  /** 판매자 프로필 이미지 URL */
  sellerProfileImageUrl?: string;
  /** 판매자 이름 */
  sellerName?: string;
  /** 콘텐츠 최저가 */
  lowestPrice?: number;
  options?: OptionResponseDoc[];
  /** 콘텐츠 소개 */
  contentIntroduction?: string;
  /** 서비스 타겟 */
  serviceTarget?: string;
  /** 제공 절차 */
  serviceProcess?: string;
  /** 메이커 소개 */
  makerIntro?: string;
}

/**
 * 코칭/문서 옵션의 모든 필드를 포함한 응답 스펙 (문서용)
 */
export interface OptionResponseDoc {
  /** 옵션 ID */
  optionId?: number;
  /** 옵션 유형 */
  optionType?: string;
  /** 옵션 이름 */
  name?: string;
  /** 옵션 설명 */
  description?: string;
  /** 옵션 가격 */
  price?: number;
  /** 코칭 기간 */
  coachingPeriod?: string;
  /** 자료 제공 여부 */
  documentProvision?: string;
  /** 코칭 방식 */
  coachingType?: string;
  /** 코칭 방식 설명 */
  coachingTypeDescription?: string;
  /** 컨텐츠 제공 방식 */
  contentDeliveryMethod?: string;
}

export type HandleBankAccountWebhookBody = {
  [key: string]: { [key: string]: unknown };
};

export type HandlePaymentWebhookBody = {
  [key: string]: { [key: string]: unknown };
};

export type SwitchUserTypeParams = {
  accessor: Accessor;
};

export type UploadProfileImageParams = {
  accessor: Accessor;
};

export type UploadProfileImageBody = {
  profileImage: Blob;
};

export type WithdrawTermsAgreementParams = {
  accessor: Accessor;
};

export type GetAdvertisingAgreementStatusParams = {
  accessor: Accessor;
};

export type UpdateAdvertisingAgreementStatusParams = {
  accessor: Accessor;
};

export type AgreeToTermsParams = {
  accessor: Accessor;
};

export type CreateOrderParams = {
  accessor: Accessor;
};

export type UploadFileParams = {
  accessor: Accessor;
  fileType?: string;
  directory?: string;
};

export type UploadFileBody = {
  file: Blob;
};

export type UploadContentThumbnailParams = {
  accessor: Accessor;
  directory?: string;
};

export type UploadContentThumbnailBody = {
  file: Blob;
};

export type AddContentThumbnailImageParams = {
  accessor: Accessor;
};

export type AddContentThumbnailImageBody = {
  contentThumbnailImage: Blob;
};

export type UploadContentsFilesParams = {
  accessor: Accessor;
  files: Blob[];
  directory?: string;
};

export type AddContentDetailImagesParams = {
  accessor: Accessor;
};

export type AddContentDetailImagesBody = {
  contentDetailImages: Blob[];
};

export type WithdrawUserParams = {
  accessor: Accessor;
};

export type VerifyEmailCodeForChangeEmailParams = {
  accessor: Accessor;
};

export type ValidateTokenParams = {
  accessor: Accessor;
};

export type UpdateNicknameParams = {
  accessor: Accessor;
};

export type ResetPasswordParams = {
  accessor: Accessor;
};

export type LogoutParams = {
  accessor: Accessor;
};

export type SetInitialUserTypeParams = {
  accessor: Accessor;
};

export type SendEmailVerificationForChangeEmailParams = {
  accessor: Accessor;
};

export type HandleWebhookBody = { [key: string]: { [key: string]: unknown } };

export type HandleWebhook200 = { [key: string]: string };

export type GetUserMyPageSummaryParams = {
  accessor: Accessor;
};

export type GetUserMyPageDetailParams = {
  accessor: Accessor;
};

export type GetUserTermsAgreementsParams = {
  accessor: Accessor;
};

export type GetMySellingContentsParams = {
  /**
   * 커서 기반 페이지네이션 요청 정보
   */
  cursorRequest: CursorRequest;
  /**
   * 콘텐츠 상태 필터 [ACTIVE - 판매중], [DRAFT - 작성중], [PENDING - 심사중], [APPROVED - 심사완료]
   */
  state: string;
  /**
   * 콘텐츠 유형 [COACHING - 코창], [DOCUMENT - 자료]
   */
  type: string;
};

export type GetMyScrapContentsParams = {
  /**
   * 커서 기반 페이지네이션 요청 정보
   */
  cursorRequest: CursorRequest;
  /**
   * 콘텐츠 타입 (COACHING 또는 DOCUMENT)
   */
  type: string;
  /**
   * 마지막으로 조회한 콘텐츠 ID (첫 페이지는 null)
   */
  lastContentId?: number;
  /**
   * 페이지 크기
   */
  size?: number;
  /**
   * 콘텐츠 유형 [COACHING - 코칭, DOCUMENT - 자료]
   */
  contentType?: GetMyScrapContentsContentType;
};

export type GetMyScrapContentsContentType =
  (typeof GetMyScrapContentsContentType)[keyof typeof GetMyScrapContentsContentType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMyScrapContentsContentType = {
  COACHING: "COACHING",
  DOCUMENT: "DOCUMENT",
} as const;

export type GetMyPurchasingContentsParams = {
  /**
   * 커서 기반 페이지네이션 요청 정보
   */
  cursorRequest: CursorRequest;
  /**
   * 구매한 콘텐츠 상태 필터 (PENDING, PAID, EXPIRED, CANCELLED)
   */
  state?: string;
  /**
   * 콘텐츠 타입 (COACHING 또는 DOCUMENT)
   */
  type: string;
};

export type AuthorizeParams = {
  redirect_uri?: string;
  provider: string;
};

export type GetNotificationsParams = {
  accessor: Accessor;
};

export type DeleteAllNotificationsParams = {
  accessor: Accessor;
};

export type GetUserHeaderInformParams = {
  accessor: Accessor;
};

export type GetDocumentContentsByCategoryParams = {
  /**
   * 카테고리 코드 (여러 개 전달 가능)
   */
  categoryId?: string[];
  page?: number;
  size?: number;
  sort?: string;
};

export type GetCoachingContentsByCategoryParams = {
  /**
   * 카테고리 코드 (여러 개 전달 가능)
   */
  categoryId?: string[];
  page?: number;
  size?: number;
  sort?: string;
};

export type CheckNicknameDuplicateParams = {
  nickname: string;
};

export type DeleteNotificationParams = {
  accessor: Accessor;
};

export type handleBankAccountWebhookResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type handleBankAccountWebhookResponseComposite =
  handleBankAccountWebhookResponse200;

export type handleBankAccountWebhookResponse =
  handleBankAccountWebhookResponseComposite & {
    headers: Headers;
  };

export const getHandleBankAccountWebhookUrl = () => {
  return `/api/webhook/bank-account`;
};

export const handleBankAccountWebhook = async (
  handleBankAccountWebhookBody: HandleBankAccountWebhookBody,
  options?: RequestInit,
): Promise<handleBankAccountWebhookResponse> => {
  return customFetch<handleBankAccountWebhookResponse>(
    getHandleBankAccountWebhookUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(handleBankAccountWebhookBody),
    },
  );
};

/**
 * 콘텐츠 승인 또는 반려 심사를 진행합니다. [관리자 기능]
 * @deprecated
 * @summary 콘텐츠 심사 [관리자 기능]
 */
export type examineContentResponse200 = {
  data: ContentExamineApiResponse;
  status: 200;
};

export type examineContentResponse400 = {
  data: ContentExamineApiResponse;
  status: 400;
};

export type examineContentResponse401 = {
  data: GrobleResponse;
  status: 401;
};

export type examineContentResponseComposite =
  | examineContentResponse200
  | examineContentResponse400
  | examineContentResponse401;

export type examineContentResponse = examineContentResponseComposite & {
  headers: Headers;
};

export const getExamineContentUrl = (contentId: number) => {
  return `/api/v1/${contentId}/examine`;
};

export const examineContent = async (
  contentId: number,
  contentExamineRequest: ContentExamineRequest,
  options?: RequestInit,
): Promise<examineContentResponse> => {
  return customFetch<examineContentResponse>(getExamineContentUrl(contentId), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(contentExamineRequest),
  });
};

export type handlePaymentWebhookResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type handlePaymentWebhookResponseComposite =
  handlePaymentWebhookResponse200;

export type handlePaymentWebhookResponse =
  handlePaymentWebhookResponseComposite & {
    headers: Headers;
  };

export const getHandlePaymentWebhookUrl = () => {
  return `/api/v1/webhook/payment`;
};

export const handlePaymentWebhook = async (
  handlePaymentWebhookBody: HandlePaymentWebhookBody,
  options?: RequestInit,
): Promise<handlePaymentWebhookResponse> => {
  return customFetch<handlePaymentWebhookResponse>(
    getHandlePaymentWebhookUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(handlePaymentWebhookBody),
    },
  );
};

/**
 * 판매자 또는 구매자로 가입 유형을 전환합니다.
 * @summary 가입 유형 전환
 */
export type switchUserTypeResponse204 = {
  data: UserSwitchRoleApiResponse;
  status: 204;
};

export type switchUserTypeResponse400 = {
  data: UserSwitchRoleApiResponse;
  status: 400;
};

export type switchUserTypeResponse401 = {
  data: GrobleResponse;
  status: 401;
};

export type switchUserTypeResponseComposite =
  | switchUserTypeResponse204
  | switchUserTypeResponse400
  | switchUserTypeResponse401;

export type switchUserTypeResponse = switchUserTypeResponseComposite & {
  headers: Headers;
};

export const getSwitchUserTypeUrl = (params: SwitchUserTypeParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/users/switch-role?${stringifiedParams}`
    : `/api/v1/users/switch-role`;
};

export const switchUserType = async (
  userTypeRequest: UserTypeRequest,
  params: SwitchUserTypeParams,
  options?: RequestInit,
): Promise<switchUserTypeResponse> => {
  return customFetch<switchUserTypeResponse>(getSwitchUserTypeUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userTypeRequest),
  });
};

/**
 * 사용자 프로필 이미지를 업로드합니다. 이미지 파일만 업로드 가능하며, 다른 파일 형식은 오류가 발생합니다.
 * @summary 사용자 프로필 이미지 업로드
 */
export type uploadProfileImageResponse201 = {
  data: FileUploadApiResponse;
  status: 201;
};

export type uploadProfileImageResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type uploadProfileImageResponseComposite =
  | uploadProfileImageResponse201
  | uploadProfileImageResponse400;

export type uploadProfileImageResponse = uploadProfileImageResponseComposite & {
  headers: Headers;
};

export const getUploadProfileImageUrl = (params: UploadProfileImageParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/users/me/profile-image?${stringifiedParams}`
    : `/api/v1/users/me/profile-image`;
};

export const uploadProfileImage = async (
  uploadProfileImageBody: UploadProfileImageBody,
  params: UploadProfileImageParams,
  options?: RequestInit,
): Promise<uploadProfileImageResponse> => {
  return customFetch<uploadProfileImageResponse>(
    getUploadProfileImageUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(uploadProfileImageBody),
    },
  );
};

/**
 * 사용자가 동의한 약관을 철회합니다. 필수 약관은 철회할 수 없습니다.
 * @summary 약관 동의 철회
 */
export type withdrawTermsAgreementResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type withdrawTermsAgreementResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type withdrawTermsAgreementResponseComposite =
  | withdrawTermsAgreementResponse200
  | withdrawTermsAgreementResponse400;

export type withdrawTermsAgreementResponse =
  withdrawTermsAgreementResponseComposite & {
    headers: Headers;
  };

export const getWithdrawTermsAgreementUrl = (
  params: WithdrawTermsAgreementParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/terms/withdraw?${stringifiedParams}`
    : `/api/v1/terms/withdraw`;
};

export const withdrawTermsAgreement = async (
  termsAgreementRequest: TermsAgreementRequest,
  params: WithdrawTermsAgreementParams,
  options?: RequestInit,
): Promise<withdrawTermsAgreementResponse> => {
  return customFetch<withdrawTermsAgreementResponse>(
    getWithdrawTermsAgreementUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(termsAgreementRequest),
    },
  );
};

/**
 * 현재 로그인한 사용자의 광고성 정보 수신 동의 여부를 조회합니다.
 * @summary 광고성 정보 수신 동의 여부 조회
 */
export type getAdvertisingAgreementStatusResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type getAdvertisingAgreementStatusResponseComposite =
  getAdvertisingAgreementStatusResponse200;

export type getAdvertisingAgreementStatusResponse =
  getAdvertisingAgreementStatusResponseComposite & {
    headers: Headers;
  };

export const getGetAdvertisingAgreementStatusUrl = (
  params: GetAdvertisingAgreementStatusParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/terms/users/me/advertising-agreement?${stringifiedParams}`
    : `/api/v1/terms/users/me/advertising-agreement`;
};

export const getAdvertisingAgreementStatus = async (
  params: GetAdvertisingAgreementStatusParams,
  options?: RequestInit,
): Promise<getAdvertisingAgreementStatusResponse> => {
  return customFetch<getAdvertisingAgreementStatusResponse>(
    getGetAdvertisingAgreementStatusUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 현재 로그인한 사용자의 광고성 정보 수신 동의 여부를 변경합니다.
 * @summary 광고성 정보 수신 동의 변경
 */
export type updateAdvertisingAgreementStatusResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type updateAdvertisingAgreementStatusResponseComposite =
  updateAdvertisingAgreementStatusResponse200;

export type updateAdvertisingAgreementStatusResponse =
  updateAdvertisingAgreementStatusResponseComposite & {
    headers: Headers;
  };

export const getUpdateAdvertisingAgreementStatusUrl = (
  params: UpdateAdvertisingAgreementStatusParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/terms/users/me/advertising-agreement?${stringifiedParams}`
    : `/api/v1/terms/users/me/advertising-agreement`;
};

export const updateAdvertisingAgreementStatus = async (
  advertisingAgreementRequest: AdvertisingAgreementRequest,
  params: UpdateAdvertisingAgreementStatusParams,
  options?: RequestInit,
): Promise<updateAdvertisingAgreementStatusResponse> => {
  return customFetch<updateAdvertisingAgreementStatusResponse>(
    getUpdateAdvertisingAgreementStatusUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(advertisingAgreementRequest),
    },
  );
};

/**
 * 사용자가 회원가입 과정에서 약관에 동의합니다.
 * @summary 회원가입 약관 동의
 */
export type agreeToTermsResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type agreeToTermsResponseComposite = agreeToTermsResponse200;

export type agreeToTermsResponse = agreeToTermsResponseComposite & {
  headers: Headers;
};

export const getAgreeToTermsUrl = (params: AgreeToTermsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/terms/agree?${stringifiedParams}`
    : `/api/v1/terms/agree`;
};

export const agreeToTerms = async (
  termsAgreementRequest: TermsAgreementRequest,
  params: AgreeToTermsParams,
  options?: RequestInit,
): Promise<agreeToTermsResponse> => {
  return customFetch<agreeToTermsResponse>(getAgreeToTermsUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(termsAgreementRequest),
  });
};

/**
 * 심사 완료 콘텐츠 중 승인이 완료된 콘텐츠를 활성화합니다.
 * @summary 콘텐츠 활성화
 */
export type activateContentResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type activateContentResponseComposite = activateContentResponse200;

export type activateContentResponse = activateContentResponseComposite & {
  headers: Headers;
};

export const getActivateContentUrl = (contentId: number) => {
  return `/api/v1/sell/content/${contentId}/active`;
};

export const activateContent = async (
  contentId: number,
  options?: RequestInit,
): Promise<activateContentResponse> => {
  return customFetch<activateContentResponse>(
    getActivateContentUrl(contentId),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * 콘텐츠 심사를 요청합니다. 콘텐츠 유형(코칭/문서)에 따라 옵션 구조가 달라집니다.
 * @summary 콘텐츠 심사 요청
 */
export type registerContentResponse200 = {
  data: ContentRegisterApiResponse;
  status: 200;
};

export type registerContentResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type registerContentResponseComposite =
  | registerContentResponse200
  | registerContentResponse400;

export type registerContentResponse = registerContentResponseComposite & {
  headers: Headers;
};

export const getRegisterContentUrl = () => {
  return `/api/v1/sell/content/register`;
};

export const registerContent = async (
  contentRegisterRequest: ContentRegisterRequest,
  options?: RequestInit,
): Promise<registerContentResponse> => {
  return customFetch<registerContentResponse>(getRegisterContentUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(contentRegisterRequest),
  });
};

/**
 * 콘텐츠를 임시 저장합니다. 콘텐츠 유형(코칭/문서)에 따라 옵션 구조가 달라집니다.
 * @summary 콘텐츠 임시 저장
 */
export type saveDraftResponse200 = {
  data: ContentDraftApiResponse;
  status: 200;
};

export type saveDraftResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type saveDraftResponseComposite =
  | saveDraftResponse200
  | saveDraftResponse400;

export type saveDraftResponse = saveDraftResponseComposite & {
  headers: Headers;
};

export const getSaveDraftUrl = () => {
  return `/api/v1/sell/content/draft`;
};

export const saveDraft = async (
  contentDraftRequest: ContentDraftRequest,
  options?: RequestInit,
): Promise<saveDraftResponse> => {
  return customFetch<saveDraftResponse>(getSaveDraftUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(contentDraftRequest),
  });
};

/**
 * 콘텐츠 스크랩 상태 변경을 진행합니다. 스크랩 콘텐츠는 나의 스크랩 목록에서 확인할 수 있습니다.
 * @summary 콘텐츠 스크랩 상태 변경
 */
export type scrapContentResponse200 = {
  data: UpdateContentScrapStateApiResponse;
  status: 200;
};

export type scrapContentResponse401 = {
  data: GrobleResponse;
  status: 401;
};

export type scrapContentResponseComposite =
  | scrapContentResponse200
  | scrapContentResponse401;

export type scrapContentResponse = scrapContentResponseComposite & {
  headers: Headers;
};

export const getScrapContentUrl = (contentId: number) => {
  return `/api/v1/scrap/content/${contentId}`;
};

export const scrapContent = async (
  contentId: number,
  updateContentScrapStateRequest: UpdateContentScrapStateRequest,
  options?: RequestInit,
): Promise<scrapContentResponse> => {
  return customFetch<scrapContentResponse>(getScrapContentUrl(contentId), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateContentScrapStateRequest),
  });
};

export type preparePaymentResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type preparePaymentResponseComposite = preparePaymentResponse200;

export type preparePaymentResponse = preparePaymentResponseComposite & {
  headers: Headers;
};

export const getPreparePaymentUrl = () => {
  return `/api/v1/payments/prepare`;
};

export const preparePayment = async (
  paymentPrepareRequest: PaymentPrepareRequest,
  options?: RequestInit,
): Promise<preparePaymentResponse> => {
  return customFetch<preparePaymentResponse>(getPreparePaymentUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(paymentPrepareRequest),
  });
};

export type approvePaymentResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type approvePaymentResponseComposite = approvePaymentResponse200;

export type approvePaymentResponse = approvePaymentResponseComposite & {
  headers: Headers;
};

export const getApprovePaymentUrl = () => {
  return `/api/v1/payments/approve`;
};

export const approvePayment = async (
  paymentApproveRequest: PaymentApproveRequest,
  options?: RequestInit,
): Promise<approvePaymentResponse> => {
  return customFetch<approvePaymentResponse>(getApprovePaymentUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(paymentApproveRequest),
  });
};

/**
 * 콘텐츠 정보를 받아 주문을 생성하고 주문 ID를 반환합니다.
 * @deprecated
 * @summary 주문 생성
 */
export type createOrderResponse201 = {
  data: OrderResponse;
  status: 201;
};

export type createOrderResponseComposite = createOrderResponse201;

export type createOrderResponse = createOrderResponseComposite & {
  headers: Headers;
};

export const getCreateOrderUrl = (params: CreateOrderParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/orders?${stringifiedParams}`
    : `/api/v1/orders`;
};

export const createOrder = async (
  createOrderRequest: CreateOrderRequest,
  params: CreateOrderParams,
  options?: RequestInit,
): Promise<createOrderResponse> => {
  return customFetch<createOrderResponse>(getCreateOrderUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createOrderRequest),
  });
};

/**
 * 폼 데이터를 통해 다양한 유형의 파일을 업로드합니다. fileType 파라미터를 통해 파일 저장 위치를 자동으로 결정하거나 directory 파라미터로 직접 지정할 수 있습니다.
 * @deprecated
 * @summary 단건 파일 업로드
 */
export type uploadFileResponse201 = {
  data: FileUploadApiResponse;
  status: 201;
};

export type uploadFileResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type uploadFileResponseComposite =
  | uploadFileResponse201
  | uploadFileResponse400;

export type uploadFileResponse = uploadFileResponseComposite & {
  headers: Headers;
};

export const getUploadFileUrl = (params: UploadFileParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/file?${stringifiedParams}`
    : `/api/v1/file`;
};

export const uploadFile = async (
  uploadFileBody: UploadFileBody,
  params: UploadFileParams,
  options?: RequestInit,
): Promise<uploadFileResponse> => {
  const formData = new FormData();
  formData.append(`file`, uploadFileBody.file);

  return customFetch<uploadFileResponse>(getUploadFileUrl(params), {
    ...options,
    method: "POST",
    body: formData,
  });
};

/**
 * 콘텐츠 대표(썸네일) 이미지를 업로드합니다. 이미지 파일만 업로드 가능하며, 다른 파일 형식은 오류가 발생합니다. 반환된 fileUrl을 콘텐츠 임시 저장 및 심사 요청에 포함하여 사용합니다.
 * @deprecated
 * @summary 콘텐츠 대표(썸네일) 이미지 업로드
 */
export type uploadContentThumbnailResponse201 = {
  data: FileUploadApiResponse;
  status: 201;
};

export type uploadContentThumbnailResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type uploadContentThumbnailResponseComposite =
  | uploadContentThumbnailResponse201
  | uploadContentThumbnailResponse400;

export type uploadContentThumbnailResponse =
  uploadContentThumbnailResponseComposite & {
    headers: Headers;
  };

export const getUploadContentThumbnailUrl = (
  params: UploadContentThumbnailParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/content/thumbnail?${stringifiedParams}`
    : `/api/v1/content/thumbnail`;
};

export const uploadContentThumbnail = async (
  uploadContentThumbnailBody: UploadContentThumbnailBody,
  params: UploadContentThumbnailParams,
  options?: RequestInit,
): Promise<uploadContentThumbnailResponse> => {
  const formData = new FormData();
  formData.append(`file`, uploadContentThumbnailBody.file);

  return customFetch<uploadContentThumbnailResponse>(
    getUploadContentThumbnailUrl(params),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );
};

/**
 * 콘텐츠 대표(썸네일) 이미지를 업로드합니다. 이미지 파일만 업로드 가능하며, 다른 파일 형식은 오류가 발생합니다. 반환된 fileUrl을 콘텐츠 임시 저장 및 심사 요청에 포함하여 사용합니다.
 * @summary 콘텐츠 대표(썸네일) 이미지 업로드
 */
export type addContentThumbnailImageResponse201 = {
  data: FileUploadApiResponse;
  status: 201;
};

export type addContentThumbnailImageResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type addContentThumbnailImageResponseComposite =
  | addContentThumbnailImageResponse201
  | addContentThumbnailImageResponse400;

export type addContentThumbnailImageResponse =
  addContentThumbnailImageResponseComposite & {
    headers: Headers;
  };

export const getAddContentThumbnailImageUrl = (
  params: AddContentThumbnailImageParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/content/thumbnail/image?${stringifiedParams}`
    : `/api/v1/content/thumbnail/image`;
};

export const addContentThumbnailImage = async (
  addContentThumbnailImageBody: AddContentThumbnailImageBody,
  params: AddContentThumbnailImageParams,
  options?: RequestInit,
): Promise<addContentThumbnailImageResponse> => {
  return customFetch<addContentThumbnailImageResponse>(
    getAddContentThumbnailImageUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(addContentThumbnailImageBody),
    },
  );
};

/**
 * 즉시 다운로드에 대한 여러 콘텐츠 파일을 한 번에 업로드합니다. 비어있지 않은 파일만 처리합니다.
 * @deprecated
 * @summary 여러 콘텐츠 파일 업로드
 */
export type uploadContentsFilesResponse201 = {
  data: MultipleFilesUploadApiResponse;
  status: 201;
};

export type uploadContentsFilesResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type uploadContentsFilesResponseComposite =
  | uploadContentsFilesResponse201
  | uploadContentsFilesResponse400;

export type uploadContentsFilesResponse =
  uploadContentsFilesResponseComposite & {
    headers: Headers;
  };

export const getUploadContentsFilesUrl = (
  params: UploadContentsFilesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/content/direct-contents?${stringifiedParams}`
    : `/api/v1/content/direct-contents`;
};

export const uploadContentsFiles = async (
  params: UploadContentsFilesParams,
  options?: RequestInit,
): Promise<uploadContentsFilesResponse> => {
  return customFetch<uploadContentsFilesResponse>(
    getUploadContentsFilesUrl(params),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * 에디터용 콘텐츠 상세 이미지를 여러 개 업로드합니다. 이미지 파일만 허용하며, 반환된 URL 리스트를 에디터에 삽입하여 사용합니다.
 * @summary 콘텐츠 상세 이미지 업로드
 */
export type addContentDetailImagesResponse201 = {
  data: MultiFileUploadApiResponse;
  status: 201;
};

export type addContentDetailImagesResponse400 = {
  data: MultiFileUploadApiResponse;
  status: 400;
};

export type addContentDetailImagesResponse401 = {
  data: GrobleResponse;
  status: 401;
};

export type addContentDetailImagesResponseComposite =
  | addContentDetailImagesResponse201
  | addContentDetailImagesResponse400
  | addContentDetailImagesResponse401;

export type addContentDetailImagesResponse =
  addContentDetailImagesResponseComposite & {
    headers: Headers;
  };

export const getAddContentDetailImagesUrl = (
  params: AddContentDetailImagesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/content/detail/images?${stringifiedParams}`
    : `/api/v1/content/detail/images`;
};

export const addContentDetailImages = async (
  addContentDetailImagesBody: AddContentDetailImagesBody,
  params: AddContentDetailImagesParams,
  options?: RequestInit,
): Promise<addContentDetailImagesResponse> => {
  return customFetch<addContentDetailImagesResponse>(
    getAddContentDetailImagesUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(addContentDetailImagesBody),
    },
  );
};

/**
 * 사용자 계정을 탈퇴 처리합니다.
 * @summary 회원 탈퇴
 */
export type withdrawUserResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type withdrawUserResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type withdrawUserResponseComposite =
  | withdrawUserResponse200
  | withdrawUserResponse400;

export type withdrawUserResponse = withdrawUserResponseComposite & {
  headers: Headers;
};

export const getWithdrawUserUrl = (params: WithdrawUserParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/auth/withdrawal?${stringifiedParams}`
    : `/api/v1/auth/withdrawal`;
};

export const withdrawUser = async (
  userWithdrawalRequest: UserWithdrawalRequest,
  params: WithdrawUserParams,
  options?: RequestInit,
): Promise<withdrawUserResponse> => {
  return customFetch<withdrawUserResponse>(getWithdrawUserUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userWithdrawalRequest),
  });
};

/**
 * 이메일로 발송된 인증 코드의 유효성을 검증합니다.
 * @summary 회원가입 시 이메일 인증 코드 확인
 */
export type verifyEmailCodeResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type verifyEmailCodeResponseComposite = verifyEmailCodeResponse200;

export type verifyEmailCodeResponse = verifyEmailCodeResponseComposite & {
  headers: Headers;
};

export const getVerifyEmailCodeUrl = () => {
  return `/api/v1/auth/verify-code/sign-up`;
};

export const verifyEmailCode = async (
  verifyEmailCodeRequest: VerifyEmailCodeRequest,
  options?: RequestInit,
): Promise<verifyEmailCodeResponse> => {
  return customFetch<verifyEmailCodeResponse>(getVerifyEmailCodeUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(verifyEmailCodeRequest),
  });
};

/**
 * 이메일 변경 시 인증 코드의 유효성을 검증하고 이메일을 변경합니다.
 * @summary 이메일 변경 시 이메일 인증 코드 확인
 */
export type verifyEmailCodeForChangeEmailResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type verifyEmailCodeForChangeEmailResponseComposite =
  verifyEmailCodeForChangeEmailResponse200;

export type verifyEmailCodeForChangeEmailResponse =
  verifyEmailCodeForChangeEmailResponseComposite & {
    headers: Headers;
  };

export const getVerifyEmailCodeForChangeEmailUrl = (
  params: VerifyEmailCodeForChangeEmailParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/auth/verify-code/change-email?${stringifiedParams}`
    : `/api/v1/auth/verify-code/change-email`;
};

export const verifyEmailCodeForChangeEmail = async (
  verifyEmailCodeRequest: VerifyEmailCodeRequest,
  params: VerifyEmailCodeForChangeEmailParams,
  options?: RequestInit,
): Promise<verifyEmailCodeForChangeEmailResponse> => {
  return customFetch<verifyEmailCodeForChangeEmailResponse>(
    getVerifyEmailCodeForChangeEmailUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(verifyEmailCodeRequest),
    },
  );
};

/**
 * 현재 사용자의 인증 토큰을 검증하고 로그인 상태를 확인합니다.
 * @summary 토큰 검증
 */
export type validateTokenResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type validateTokenResponseComposite = validateTokenResponse200;

export type validateTokenResponse = validateTokenResponseComposite & {
  headers: Headers;
};

export const getValidateTokenUrl = (params: ValidateTokenParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/auth/validate-token?${stringifiedParams}`
    : `/api/v1/auth/validate-token`;
};

export const validateToken = async (
  params: ValidateTokenParams,
  options?: RequestInit,
): Promise<validateTokenResponse> => {
  return customFetch<validateTokenResponse>(getValidateTokenUrl(params), {
    ...options,
    method: "POST",
  });
};

/**
 * 닉네임을 수정합니다.
 * @summary 닉네임 수정
 */
export type updateNicknameResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type updateNicknameResponse401 = {
  data: GrobleResponse;
  status: 401;
};

export type updateNicknameResponseComposite =
  | updateNicknameResponse200
  | updateNicknameResponse401;

export type updateNicknameResponse = updateNicknameResponseComposite & {
  headers: Headers;
};

export const getUpdateNicknameUrl = (params: UpdateNicknameParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/auth/users/nickname?${stringifiedParams}`
    : `/api/v1/auth/users/nickname`;
};

export const updateNickname = async (
  nicknameRequest: NicknameRequest,
  params: UpdateNicknameParams,
  options?: RequestInit,
): Promise<updateNicknameResponse> => {
  return customFetch<updateNicknameResponse>(getUpdateNicknameUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(nicknameRequest),
  });
};

/**
 * 새로운 사용자를 등록하고 인증 토큰을 발급합니다.
 * @summary 회원가입
 */
export type signUpResponse201 = {
  data: SignUpApiResponse;
  status: 201;
};

export type signUpResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type signUpResponseComposite = signUpResponse201 | signUpResponse400;

export type signUpResponse = signUpResponseComposite & {
  headers: Headers;
};

export const getSignUpUrl = () => {
  return `/api/v1/auth/sign-up`;
};

export const signUp = async (
  signUpRequest: SignUpRequest,
  options?: RequestInit,
): Promise<signUpResponse> => {
  return customFetch<signUpResponse>(getSignUpUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(signUpRequest),
  });
};

/**
 * 새로운 사용자를 등록하고 인증 토큰을 발급합니다.
 * @deprecated
 * @summary 통합 회원가입 [deprecated]
 */
export type signUp1Response200 = {
  data: GrobleResponse;
  status: 200;
};

export type signUp1ResponseComposite = signUp1Response200;

export type signUp1Response = signUp1ResponseComposite & {
  headers: Headers;
};

export const getSignUp1Url = () => {
  return `/api/v1/auth/sign-up/deprecated`;
};

export const signUp1 = async (
  deprecatedSignUpRequest: DeprecatedSignUpRequest,
  options?: RequestInit,
): Promise<signUp1Response> => {
  return customFetch<signUp1Response>(getSignUp1Url(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(deprecatedSignUpRequest),
  });
};

/**
 * 이메일과 비밀번호로 로그인하고 인증 토큰을 발급합니다.
 * @summary 로그인
 */
export type signInResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type signInResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type signInResponseComposite = signInResponse200 | signInResponse400;

export type signInResponse = signInResponseComposite & {
  headers: Headers;
};

export const getSignInUrl = () => {
  return `/api/v1/auth/sign-in`;
};

export const signIn = async (
  signInRequest: SignInRequest,
  options?: RequestInit,
): Promise<signInResponse> => {
  return customFetch<signInResponse>(getSignInUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(signInRequest),
  });
};

/**
 * 리프레시 토큰을 사용하여 새로운 액세스 토큰을 발급합니다.
 * @summary accessToken 재발급
 */
export type refreshTokenResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type refreshTokenResponseComposite = refreshTokenResponse200;

export type refreshTokenResponse = refreshTokenResponseComposite & {
  headers: Headers;
};

export const getRefreshTokenUrl = () => {
  return `/api/v1/auth/refresh-token`;
};

export const refreshToken = async (
  options?: RequestInit,
): Promise<refreshTokenResponse> => {
  return customFetch<refreshTokenResponse>(getRefreshTokenUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * 새로운 비밀번호로 재설정합니다.
 * @summary 비밀번호 재설정
 */
export type resetPasswordResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type resetPasswordResponseComposite = resetPasswordResponse200;

export type resetPasswordResponse = resetPasswordResponseComposite & {
  headers: Headers;
};

export const getResetPasswordUrl = (params: ResetPasswordParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/auth/password/reset?${stringifiedParams}`
    : `/api/v1/auth/password/reset`;
};

export const resetPassword = async (
  resetPasswordRequest: ResetPasswordRequest,
  params: ResetPasswordParams,
  options?: RequestInit,
): Promise<resetPasswordResponse> => {
  return customFetch<resetPasswordResponse>(getResetPasswordUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(resetPasswordRequest),
  });
};

/**
 * 비밀번호 재설정 링크가 포함된 이메일을 발송합니다.
 * @summary 비밀번호 재설정 이메일 발송
 */
export type requestPasswordResetResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type requestPasswordResetResponseComposite =
  requestPasswordResetResponse200;

export type requestPasswordResetResponse =
  requestPasswordResetResponseComposite & {
    headers: Headers;
  };

export const getRequestPasswordResetUrl = () => {
  return `/api/v1/auth/password/reset-request`;
};

export const requestPasswordReset = async (
  emailVerificationRequest: EmailVerificationRequest,
  options?: RequestInit,
): Promise<requestPasswordResetResponse> => {
  return customFetch<requestPasswordResetResponse>(
    getRequestPasswordResetUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(emailVerificationRequest),
    },
  );
};

/**
 * 로그아웃을 통해 쿠키와 토큰을 무효화합니다.
 * @summary 로그아웃
 */
export type logoutResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type logoutResponseComposite = logoutResponse200;

export type logoutResponse = logoutResponseComposite & {
  headers: Headers;
};

export const getLogoutUrl = (params: LogoutParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/auth/logout?${stringifiedParams}`
    : `/api/v1/auth/logout`;
};

export const logout = async (
  params: LogoutParams,
  options?: RequestInit,
): Promise<logoutResponse> => {
  return customFetch<logoutResponse>(getLogoutUrl(params), {
    ...options,
    method: "POST",
  });
};

/**
 * 회원가입 시 판매자 또는 구매자 중 선택합니다.
 * @deprecated
 * @summary 회원가입 유형 선택
 */
export type setInitialUserTypeResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type setInitialUserTypeResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type setInitialUserTypeResponseComposite =
  | setInitialUserTypeResponse200
  | setInitialUserTypeResponse400;

export type setInitialUserTypeResponse = setInitialUserTypeResponseComposite & {
  headers: Headers;
};

export const getSetInitialUserTypeUrl = (params: SetInitialUserTypeParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/auth/initial-user-type?${stringifiedParams}`
    : `/api/v1/auth/initial-user-type`;
};

export const setInitialUserType = async (
  userTypeRequest: UserTypeRequest,
  params: SetInitialUserTypeParams,
  options?: RequestInit,
): Promise<setInitialUserTypeResponse> => {
  return customFetch<setInitialUserTypeResponse>(
    getSetInitialUserTypeUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(userTypeRequest),
    },
  );
};

/**
 * 사용자가 기입한 이메일에 인증 코드를 발급합니다.
 * @summary 통합 회원가입 이메일 인증 요청
 */
export type sendEmailVerificationForSignUpResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type sendEmailVerificationForSignUpResponseComposite =
  sendEmailVerificationForSignUpResponse200;

export type sendEmailVerificationForSignUpResponse =
  sendEmailVerificationForSignUpResponseComposite & {
    headers: Headers;
  };

export const getSendEmailVerificationForSignUpUrl = () => {
  return `/api/v1/auth/email-verification/sign-up`;
};

export const sendEmailVerificationForSignUp = async (
  emailVerificationRequest: EmailVerificationRequest,
  options?: RequestInit,
): Promise<sendEmailVerificationForSignUpResponse> => {
  return customFetch<sendEmailVerificationForSignUpResponse>(
    getSendEmailVerificationForSignUpUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(emailVerificationRequest),
    },
  );
};

/**
 * 사용자가 기입한 이메일에 인증 코드를 발급합니다.
 * @summary 이메일 변경 이메일 인증 요청
 */
export type sendEmailVerificationForChangeEmailResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type sendEmailVerificationForChangeEmailResponseComposite =
  sendEmailVerificationForChangeEmailResponse200;

export type sendEmailVerificationForChangeEmailResponse =
  sendEmailVerificationForChangeEmailResponseComposite & {
    headers: Headers;
  };

export const getSendEmailVerificationForChangeEmailUrl = (
  params: SendEmailVerificationForChangeEmailParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/auth/email-verification/change-email?${stringifiedParams}`
    : `/api/v1/auth/email-verification/change-email`;
};

export const sendEmailVerificationForChangeEmail = async (
  emailVerificationRequest: EmailVerificationRequest,
  params: SendEmailVerificationForChangeEmailParams,
  options?: RequestInit,
): Promise<sendEmailVerificationForChangeEmailResponse> => {
  return customFetch<sendEmailVerificationForChangeEmailResponse>(
    getSendEmailVerificationForChangeEmailUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(emailVerificationRequest),
    },
  );
};

export type handleWebhookResponse200 = {
  data: HandleWebhook200;
  status: 200;
};

export type handleWebhookResponseComposite = handleWebhookResponse200;

export type handleWebhookResponse = handleWebhookResponseComposite & {
  headers: Headers;
};

export const getHandleWebhookUrl = () => {
  return `/api/payments/webhook`;
};

export const handleWebhook = async (
  handleWebhookBody: HandleWebhookBody,
  options?: RequestInit,
): Promise<handleWebhookResponse> => {
  return customFetch<handleWebhookResponse>(getHandleWebhookUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(handleWebhookBody),
  });
};

export type issueVirtualAccountResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type issueVirtualAccountResponseComposite =
  issueVirtualAccountResponse200;

export type issueVirtualAccountResponse =
  issueVirtualAccountResponseComposite & {
    headers: Headers;
  };

export const getIssueVirtualAccountUrl = () => {
  return `/api/payments/virtual-account`;
};

export const issueVirtualAccount = async (
  virtualAccountRequest: VirtualAccountRequest,
  options?: RequestInit,
): Promise<issueVirtualAccountResponse> => {
  return customFetch<issueVirtualAccountResponse>(getIssueVirtualAccountUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(virtualAccountRequest),
  });
};

export type preparePayment1Response200 = {
  data: GrobleResponse;
  status: 200;
};

export type preparePayment1ResponseComposite = preparePayment1Response200;

export type preparePayment1Response = preparePayment1ResponseComposite & {
  headers: Headers;
};

export const getPreparePayment1Url = () => {
  return `/api/payments/prepare`;
};

export const preparePayment1 = async (
  paymentPrepareRequest: PaymentPrepareRequest,
  options?: RequestInit,
): Promise<preparePayment1Response> => {
  return customFetch<preparePayment1Response>(getPreparePayment1Url(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(paymentPrepareRequest),
  });
};

export type cancelPaymentResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type cancelPaymentResponseComposite = cancelPaymentResponse200;

export type cancelPaymentResponse = cancelPaymentResponseComposite & {
  headers: Headers;
};

export const getCancelPaymentUrl = () => {
  return `/api/payments/cancel`;
};

export const cancelPayment = async (
  paymentCancelRequest: PaymentCancelRequest,
  options?: RequestInit,
): Promise<cancelPaymentResponse> => {
  return customFetch<cancelPaymentResponse>(getCancelPaymentUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(paymentCancelRequest),
  });
};

export type approvePayment1Response200 = {
  data: GrobleResponse;
  status: 200;
};

export type approvePayment1ResponseComposite = approvePayment1Response200;

export type approvePayment1Response = approvePayment1ResponseComposite & {
  headers: Headers;
};

export const getApprovePayment1Url = () => {
  return `/api/payments/approve`;
};

export const approvePayment1 = async (
  paymentApproveRequest: PaymentApproveRequest,
  options?: RequestInit,
): Promise<approvePayment1Response> => {
  return customFetch<approvePayment1Response>(getApprovePayment1Url(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(paymentApproveRequest),
  });
};

/**
 * 마이페이지 첫 화면에서 요약 정보를 조회합니다. 사용자 유형(구매자/판매자)에 따라 응답 구조가 달라집니다.
 * @summary 마이페이지 요약 정보 조회
 */
export type getUserMyPageSummaryResponse200 = {
  data: UserMyPageSummaryApiResponse;
  status: 200;
};

export type getUserMyPageSummaryResponse401 = {
  data: GrobleResponse;
  status: 401;
};

export type getUserMyPageSummaryResponseComposite =
  | getUserMyPageSummaryResponse200
  | getUserMyPageSummaryResponse401;

export type getUserMyPageSummaryResponse =
  getUserMyPageSummaryResponseComposite & {
    headers: Headers;
  };

export const getGetUserMyPageSummaryUrl = (
  params: GetUserMyPageSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/users/me/summary?${stringifiedParams}`
    : `/api/v1/users/me/summary`;
};

export const getUserMyPageSummary = async (
  params: GetUserMyPageSummaryParams,
  options?: RequestInit,
): Promise<getUserMyPageSummaryResponse> => {
  return customFetch<getUserMyPageSummaryResponse>(
    getGetUserMyPageSummaryUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 마이페이지에서 사용자 상세 정보를 조회합니다.
 * @summary 마이페이지 상세 정보 조회
 */
export type getUserMyPageDetailResponse200 = {
  data: UserMyPageDetailApiResponse;
  status: 200;
};

export type getUserMyPageDetailResponse401 = {
  data: GrobleResponse;
  status: 401;
};

export type getUserMyPageDetailResponseComposite =
  | getUserMyPageDetailResponse200
  | getUserMyPageDetailResponse401;

export type getUserMyPageDetailResponse =
  getUserMyPageDetailResponseComposite & {
    headers: Headers;
  };

export const getGetUserMyPageDetailUrl = (
  params: GetUserMyPageDetailParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/users/me/detail?${stringifiedParams}`
    : `/api/v1/users/me/detail`;
};

export const getUserMyPageDetail = async (
  params: GetUserMyPageDetailParams,
  options?: RequestInit,
): Promise<getUserMyPageDetailResponse> => {
  return customFetch<getUserMyPageDetailResponse>(
    getGetUserMyPageDetailUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 사용자의 약관 동의 상태를 조회합니다.
 * @summary 사용자 약관 동의 상태 조회
 */
export type getUserTermsAgreementsResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type getUserTermsAgreementsResponseComposite =
  getUserTermsAgreementsResponse200;

export type getUserTermsAgreementsResponse =
  getUserTermsAgreementsResponseComposite & {
    headers: Headers;
  };

export const getGetUserTermsAgreementsUrl = (
  params: GetUserTermsAgreementsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/terms/user?${stringifiedParams}`
    : `/api/v1/terms/user`;
};

export const getUserTermsAgreements = async (
  params: GetUserTermsAgreementsParams,
  options?: RequestInit,
): Promise<getUserTermsAgreementsResponse> => {
  return customFetch<getUserTermsAgreementsResponse>(
    getGetUserTermsAgreementsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 현재 유효한 최신 버전의 약관 목록을 조회합니다.
 * @summary 현재 유효한 약관 목록 조회
 */
export type getActiveTermsResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type getActiveTermsResponseComposite = getActiveTermsResponse200;

export type getActiveTermsResponse = getActiveTermsResponseComposite & {
  headers: Headers;
};

export const getGetActiveTermsUrl = () => {
  return `/api/v1/terms/active`;
};

export const getActiveTerms = async (
  options?: RequestInit,
): Promise<getActiveTermsResponse> => {
  return customFetch<getActiveTermsResponse>(getGetActiveTermsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * 심사 거절된 콘텐츠의 거절 사유를 조회합니다.
 * @summary 콘텐츠 심사 거절 사유 조회
 */
export type getExamineRejectReasonResponse200 = {
  data: ContentExamineRejectApiResponse;
  status: 200;
};

export type getExamineRejectReasonResponse401 = {
  data: GrobleResponse;
  status: 401;
};

export type getExamineRejectReasonResponseComposite =
  | getExamineRejectReasonResponse200
  | getExamineRejectReasonResponse401;

export type getExamineRejectReasonResponse =
  getExamineRejectReasonResponseComposite & {
    headers: Headers;
  };

export const getGetExamineRejectReasonUrl = (contentId: number) => {
  return `/api/v1/sell/content/${contentId}/examine/reject`;
};

export const getExamineRejectReason = async (
  contentId: number,
  options?: RequestInit,
): Promise<getExamineRejectReasonResponse> => {
  return customFetch<getExamineRejectReasonResponse>(
    getGetExamineRejectReasonUrl(contentId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 나의 코칭 또는 자료 콘텐츠를 조회합니다.
 * @summary 나의 판매 콘텐츠 조회
 */
export type getMySellingContentsResponse200 = {
  data: MySellingContentsApiResponse;
  status: 200;
};

export type getMySellingContentsResponse401 = {
  data: GrobleResponse;
  status: 401;
};

export type getMySellingContentsResponseComposite =
  | getMySellingContentsResponse200
  | getMySellingContentsResponse401;

export type getMySellingContentsResponse =
  getMySellingContentsResponseComposite & {
    headers: Headers;
  };

export const getGetMySellingContentsUrl = (
  params: GetMySellingContentsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  console.log(
    stringifiedParams.length > 0
      ? `/api/v1/sell/content/my/selling-contents?${stringifiedParams}`
      : `/api/v1/sell/content/my/selling-contents`,
  );
  return stringifiedParams.length > 0
    ? `/api/v1/sell/content/my/selling-contents?${stringifiedParams}`
    : `/api/v1/sell/content/my/selling-contents`;
};

export const getMySellingContents = async (
  params: GetMySellingContentsParams,
  options?: RequestInit,
): Promise<getMySellingContentsResponse> => {
  return customFetch<getMySellingContentsResponse>(
    getGetMySellingContentsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 내가 스크랩한 콘텐츠들을 커서 기반 페이지네이션으로 조회합니다.
 * @summary 내가 스크랩한 콘텐츠 조회
 */
export type getMyScrapContentsResponse200 = {
  data: ContentScrapCardApiResponse;
  status: 200;
};

export type getMyScrapContentsResponse401 = {
  data: GrobleResponse;
  status: 401;
};

export type getMyScrapContentsResponseComposite =
  | getMyScrapContentsResponse200
  | getMyScrapContentsResponse401;

export type getMyScrapContentsResponse = getMyScrapContentsResponseComposite & {
  headers: Headers;
};

export const getGetMyScrapContentsUrl = (params: GetMyScrapContentsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/scrap/contents?${stringifiedParams}`
    : `/api/v1/scrap/contents`;
};

export const getMyScrapContents = async (
  params: GetMyScrapContentsParams,
  options?: RequestInit,
): Promise<getMyScrapContentsResponse> => {
  return customFetch<getMyScrapContentsResponse>(
    getGetMyScrapContentsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @deprecated
 */
export type getMyPurchasingContentsResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type getMyPurchasingContentsResponseComposite =
  getMyPurchasingContentsResponse200;

export type getMyPurchasingContentsResponse =
  getMyPurchasingContentsResponseComposite & {
    headers: Headers;
  };

export const getGetMyPurchasingContentsUrl = (
  params: GetMyPurchasingContentsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/purchase/contents/my?${stringifiedParams}`
    : `/api/v1/purchase/contents/my`;
};

export const getMyPurchasingContents = async (
  params: GetMyPurchasingContentsParams,
  options?: RequestInit,
): Promise<getMyPurchasingContentsResponse> => {
  return customFetch<getMyPurchasingContentsResponse>(
    getGetMyPurchasingContentsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export type getClientKeyResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type getClientKeyResponseComposite = getClientKeyResponse200;

export type getClientKeyResponse = getClientKeyResponseComposite & {
  headers: Headers;
};

export const getGetClientKeyUrl = () => {
  return `/api/v1/payments/client-key`;
};

export const getClientKey = async (
  options?: RequestInit,
): Promise<getClientKeyResponse> => {
  return customFetch<getClientKeyResponse>(getGetClientKeyUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * 소셜 로그인 시작 전 리다이렉트 URI를 설정합니다.
 * @summary OAuth2 로그인 시작
 */
export type authorizeResponse200 = {
  data: void;
  status: 200;
};

export type authorizeResponseComposite = authorizeResponse200;

export type authorizeResponse = authorizeResponseComposite & {
  headers: Headers;
};

export const getAuthorizeUrl = (params: AuthorizeParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/oauth2/authorize?${stringifiedParams}`
    : `/api/v1/oauth2/authorize`;
};

export const authorize = async (
  params: AuthorizeParams,
  options?: RequestInit,
): Promise<authorizeResponse> => {
  return customFetch<authorizeResponse>(getAuthorizeUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * 사용자가 알림 목록 정보를 조회합니다.
 * @summary 알림 목록 정보 조회
 */
export type getNotificationsResponse200 = {
  data: NotificationItemsApiResponse;
  status: 200;
};

export type getNotificationsResponse401 = {
  data: GrobleResponse;
  status: 401;
};

export type getNotificationsResponseComposite =
  | getNotificationsResponse200
  | getNotificationsResponse401;

export type getNotificationsResponse = getNotificationsResponseComposite & {
  headers: Headers;
};

export const getGetNotificationsUrl = (params: GetNotificationsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/notifications?${stringifiedParams}`
    : `/api/v1/notifications`;
};

export const getNotifications = async (
  params: GetNotificationsParams,
  options?: RequestInit,
): Promise<getNotificationsResponse> => {
  return customFetch<getNotificationsResponse>(getGetNotificationsUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * 사용자의 모든 알림을 삭제합니다.
 * @summary 알림 전체 삭제
 */
export type deleteAllNotificationsResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type deleteAllNotificationsResponseComposite =
  deleteAllNotificationsResponse200;

export type deleteAllNotificationsResponse =
  deleteAllNotificationsResponseComposite & {
    headers: Headers;
  };

export const getDeleteAllNotificationsUrl = (
  params: DeleteAllNotificationsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/notifications?${stringifiedParams}`
    : `/api/v1/notifications`;
};

export const deleteAllNotifications = async (
  params: DeleteAllNotificationsParams,
  options?: RequestInit,
): Promise<deleteAllNotificationsResponse> => {
  return customFetch<deleteAllNotificationsResponse>(
    getDeleteAllNotificationsUrl(params),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * 홈화면에 표시될 사용자 헤더 정보를 조회합니다. 로그인 상태 여부에 관계없이 응답을 반환합니다.
 * @summary 홈화면 헤더 정보 조회
 */
export type getUserHeaderInformResponse200 = {
  data: UserHeaderApiResponse;
  status: 200;
};

export type getUserHeaderInformResponse500 = {
  data: GrobleResponse;
  status: 500;
};

export type getUserHeaderInformResponseComposite =
  | getUserHeaderInformResponse200
  | getUserHeaderInformResponse500;

export type getUserHeaderInformResponse =
  getUserHeaderInformResponseComposite & {
    headers: Headers;
  };

export const getGetUserHeaderInformUrl = (
  params: GetUserHeaderInformParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/me?${stringifiedParams}`
    : `/api/v1/me`;
};

export const getUserHeaderInform = async (
  params: GetUserHeaderInformParams,
  options?: RequestInit,
): Promise<getUserHeaderInformResponse> => {
  return customFetch<getUserHeaderInformResponse>(
    getGetUserHeaderInformUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 홈화면에 표시할 콘텐츠 목록을 타입별로 조회합니다. [코칭 또는 자료]
 * @summary 홈화면 콘텐츠 목록 조회
 */
export type getHomeContentsResponse200 = {
  data: HomeContentsApiResponse;
  status: 200;
};

export type getHomeContentsResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type getHomeContentsResponseComposite =
  | getHomeContentsResponse200
  | getHomeContentsResponse400;

export type getHomeContentsResponse = getHomeContentsResponseComposite & {
  headers: Headers;
};

export const getGetHomeContentsUrl = () => {
  return `/api/v1/home/contents`;
};

export const getHomeContents = async (
  options?: RequestInit,
): Promise<getHomeContentsResponse> => {
  return customFetch<getHomeContentsResponse>(getGetHomeContentsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * 카테고리 ID로 페이지 번호 기반으로 콘텐츠를 조회합니다. 반환되는 `items` 배열의 요소는 ContentPreviewCardResponse 입니다.
 * @summary 카테고리별 자료 콘텐츠 조회
 */
export type getDocumentContentsByCategoryResponse200 = {
  data: ContentsCategoryApiResponse;
  status: 200;
};

export type getDocumentContentsByCategoryResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type getDocumentContentsByCategoryResponseComposite =
  | getDocumentContentsByCategoryResponse200
  | getDocumentContentsByCategoryResponse400;

export type getDocumentContentsByCategoryResponse =
  getDocumentContentsByCategoryResponseComposite & {
    headers: Headers;
  };

export const getGetDocumentContentsByCategoryUrl = (
  params?: GetDocumentContentsByCategoryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/contents/document/category?${stringifiedParams}`
    : `/api/v1/contents/document/category`;
};

export const getDocumentContentsByCategory = async (
  params?: GetDocumentContentsByCategoryParams,
  options?: RequestInit,
): Promise<getDocumentContentsByCategoryResponse> => {
  return customFetch<getDocumentContentsByCategoryResponse>(
    getGetDocumentContentsByCategoryUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 카테고리 ID로 페이지 번호 기반으로 콘텐츠를 조회합니다. 반환되는 `items` 배열의 요소는 ContentPreviewCardResponse 입니다.
 * @summary 카테고리별 콘텐츠 조회
 */
export type getCoachingContentsByCategoryResponse200 = {
  data: ContentsCategoryApiResponse;
  status: 200;
};

export type getCoachingContentsByCategoryResponse400 = {
  data: GrobleResponse;
  status: 400;
};

export type getCoachingContentsByCategoryResponseComposite =
  | getCoachingContentsByCategoryResponse200
  | getCoachingContentsByCategoryResponse400;

export type getCoachingContentsByCategoryResponse =
  getCoachingContentsByCategoryResponseComposite & {
    headers: Headers;
  };

export const getGetCoachingContentsByCategoryUrl = (
  params?: GetCoachingContentsByCategoryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/contents/coaching/category?${stringifiedParams}`
    : `/api/v1/contents/coaching/category`;
};

export const getCoachingContentsByCategory = async (
  params?: GetCoachingContentsByCategoryParams,
  options?: RequestInit,
): Promise<getCoachingContentsByCategoryResponse> => {
  return customFetch<getCoachingContentsByCategoryResponse>(
    getGetCoachingContentsByCategoryUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 콘텐츠 상세 정보를 조회합니다. [코칭 & 자료]
 * @summary 콘텐츠 상세 정보 조회
 */
export type getContentDetailResponse200 = {
  data: ContentDetailApiResponse;
  status: 200;
};

export type getContentDetailResponse401 = {
  data: GrobleResponse;
  status: 401;
};

export type getContentDetailResponseComposite =
  | getContentDetailResponse200
  | getContentDetailResponse401;

export type getContentDetailResponse = getContentDetailResponseComposite & {
  headers: Headers;
};

export const getGetContentDetailUrl = (contentId: number) => {
  return `/api/v1/content/${contentId}`;
};

export const getContentDetail = async (
  contentId: number,
  options?: RequestInit,
): Promise<getContentDetailResponse> => {
  return customFetch<getContentDetailResponse>(
    getGetContentDetailUrl(contentId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 닉네임이 이미 사용 중인지 확인합니다. 회원가입 및 닉네임 수정 시 사용됩니다.
 * @summary 닉네임 중복 확인
 */
export type checkNicknameDuplicateResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type checkNicknameDuplicateResponse401 = {
  data: GrobleResponse;
  status: 401;
};

export type checkNicknameDuplicateResponseComposite =
  | checkNicknameDuplicateResponse200
  | checkNicknameDuplicateResponse401;

export type checkNicknameDuplicateResponse =
  checkNicknameDuplicateResponseComposite & {
    headers: Headers;
  };

export const getCheckNicknameDuplicateUrl = (
  params: CheckNicknameDuplicateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/auth/nickname/check?${stringifiedParams}`
    : `/api/v1/auth/nickname/check`;
};

export const checkNicknameDuplicate = async (
  params: CheckNicknameDuplicateParams,
  options?: RequestInit,
): Promise<checkNicknameDuplicateResponse> => {
  return customFetch<checkNicknameDuplicateResponse>(
    getCheckNicknameDuplicateUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export type getPaymentDetailsResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type getPaymentDetailsResponseComposite = getPaymentDetailsResponse200;

export type getPaymentDetailsResponse = getPaymentDetailsResponseComposite & {
  headers: Headers;
};

export const getGetPaymentDetailsUrl = (paymentKey: string) => {
  return `/api/payments/${paymentKey}`;
};

export const getPaymentDetails = async (
  paymentKey: string,
  options?: RequestInit,
): Promise<getPaymentDetailsResponse> => {
  return customFetch<getPaymentDetailsResponse>(
    getGetPaymentDetailsUrl(paymentKey),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 특정 알림을 삭제합니다.
 * @summary 알림 단일 삭제
 */
export type deleteNotificationResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type deleteNotificationResponseComposite = deleteNotificationResponse200;

export type deleteNotificationResponse = deleteNotificationResponseComposite & {
  headers: Headers;
};

export const getDeleteNotificationUrl = (
  notificationId: number,
  params: DeleteNotificationParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/notifications/${notificationId}?${stringifiedParams}`
    : `/api/v1/notifications/${notificationId}`;
};

export const deleteNotification = async (
  notificationId: number,
  params: DeleteNotificationParams,
  options?: RequestInit,
): Promise<deleteNotificationResponse> => {
  return customFetch<deleteNotificationResponse>(
    getDeleteNotificationUrl(notificationId, params),
    {
      ...options,
      method: "DELETE",
    },
  );
};
