/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Groble API
 * Groble 서비스의 API 명세서입니다.
 * OpenAPI spec version: v1.0.0
 */
import { customFetch } from "./custom-fetch";
export interface ErrorDetail {
  code?: string;
  message?: string;
  exception?: string;
  field?: string;
  trace?: string;
}

export type GrobleResponseVoidStatus =
  (typeof GrobleResponseVoidStatus)[keyof typeof GrobleResponseVoidStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseVoidStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export type GrobleResponseVoidData = { [key: string]: unknown };

export interface GrobleResponseVoid {
  status?: GrobleResponseVoidStatus;
  code?: number;
  message?: string;
  data?: GrobleResponseVoidData;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface Accessor {
  id?: number;
  email?: string;
  roles?: string[];
  userType?: string;
  accountType?: string;
  userId?: number;
}

export interface UserTypeRequest {
  /** @pattern ^(SELLER|BUYER)$ */
  userType: string;
}

export type TermsAgreementRequestTermsTypesItem =
  (typeof TermsAgreementRequestTermsTypesItem)[keyof typeof TermsAgreementRequestTermsTypesItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TermsAgreementRequestTermsTypesItem = {
  AGE_POLICY: "AGE_POLICY",
  SELLER_TERMS_POLICY: "SELLER_TERMS_POLICY",
  PRIVACY_POLICY: "PRIVACY_POLICY",
  SERVICE_TERMS_POLICY: "SERVICE_TERMS_POLICY",
  SALES_TERMS_POLICY: "SALES_TERMS_POLICY",
  MARKETING_POLICY: "MARKETING_POLICY",
  ADVERTISING_POLICY: "ADVERTISING_POLICY",
} as const;

export interface TermsAgreementRequest {
  termsTypes: TermsAgreementRequestTermsTypesItem[];
}

export type GrobleResponseStatus =
  (typeof GrobleResponseStatus)[keyof typeof GrobleResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export type GrobleResponseData = { [key: string]: unknown };

export interface GrobleResponse {
  status?: GrobleResponseStatus;
  code?: number;
  message?: string;
  data?: GrobleResponseData;
  error?: ErrorDetail;
  timestamp?: string;
}

export type GrobleResponseTermsAgreementResponseStatus =
  (typeof GrobleResponseTermsAgreementResponseStatus)[keyof typeof GrobleResponseTermsAgreementResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseTermsAgreementResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseTermsAgreementResponse {
  status?: GrobleResponseTermsAgreementResponseStatus;
  code?: number;
  message?: string;
  data?: TermsAgreementResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export type TermsAgreementResponseType =
  (typeof TermsAgreementResponseType)[keyof typeof TermsAgreementResponseType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TermsAgreementResponseType = {
  AGE_POLICY: "AGE_POLICY",
  SELLER_TERMS_POLICY: "SELLER_TERMS_POLICY",
  PRIVACY_POLICY: "PRIVACY_POLICY",
  SERVICE_TERMS_POLICY: "SERVICE_TERMS_POLICY",
  SALES_TERMS_POLICY: "SALES_TERMS_POLICY",
  MARKETING_POLICY: "MARKETING_POLICY",
  ADVERTISING_POLICY: "ADVERTISING_POLICY",
} as const;

export interface TermsAgreementResponse {
  id?: number;
  type?: TermsAgreementResponseType;
  title?: string;
  version?: string;
  required?: boolean;
  contentUrl?: string;
  agreed?: boolean;
  agreedAt?: string;
  effectiveFrom?: string;
  effectiveTo?: string;
}

export interface AdvertisingAgreementRequest {
  agreed: boolean;
}

export interface CardOptions {
  installment?: number;
  useCardPoint?: boolean;
  useInternationalCard?: boolean;
}

export type PaymentPrepareRequestAdditionalOptions = {
  [key: string]: { [key: string]: unknown };
};

export interface PaymentPrepareRequest {
  orderId: number;
  paymentMethod: string;
  orderName?: string;
  amount?: number;
  customerName?: string;
  customerEmail?: string;
  customerPhone?: string;
  successUrl?: string;
  failUrl?: string;
  pgProvider?: string;
  cardOptions?: CardOptions;
  virtualAccountOptions?: VirtualAccountOptions;
  additionalOptions?: PaymentPrepareRequestAdditionalOptions;
}

export interface VirtualAccountOptions {
  bankCode?: string;
  validHours?: number;
  cashReceiptType?: string;
}

export type GrobleResponsePaymentPrepareResponseStatus =
  (typeof GrobleResponsePaymentPrepareResponseStatus)[keyof typeof GrobleResponsePaymentPrepareResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponsePaymentPrepareResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponsePaymentPrepareResponse {
  status?: GrobleResponsePaymentPrepareResponseStatus;
  code?: number;
  message?: string;
  data?: PaymentPrepareResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface PaymentPrepareResponse {
  paymentKey?: string;
  merchantUid?: string;
  amount?: number;
  status?: string;
  pgProvider?: string;
  clientKey?: string;
}

export interface PaymentApproveRequest {
  paymentKey: string;
  merchantUid: string;
  amount: number;
}

export type GrobleResponsePaymentResponseStatus =
  (typeof GrobleResponsePaymentResponseStatus)[keyof typeof GrobleResponsePaymentResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponsePaymentResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponsePaymentResponse {
  status?: GrobleResponsePaymentResponseStatus;
  code?: number;
  message?: string;
  data?: PaymentResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface PaymentResponse {
  paymentId?: number;
  paymentKey?: string;
  merchantUid?: string;
  amount?: number;
  status?: string;
  paymentMethod?: string;
  customerName?: string;
  customerEmail?: string;
  customerPhone?: string;
  paidAt?: string;
  receiptUrl?: string;
  isEscrow?: boolean;
  isCashReceipt?: boolean;
  cardNumber?: string;
  cardIssuerName?: string;
  cardAcquirerName?: string;
  cardInstallmentPlanMonths?: string;
  virtualAccountNumber?: string;
  virtualAccountBankName?: string;
  virtualAccountExpiryDate?: string;
  cancelReason?: string;
  cancelAmount?: number;
  cancelledAt?: string;
  pgProvider?: string;
  clientKey?: string;
}

export interface CreateOrderRequest {
  contentId?: number;
  contentOptionId?: number;
  price?: number;
  quantity?: number;
  totalPrice?: number;
}

/**
 * 주문 응답 DTO
 */
export interface OrderResponse {
  orderId?: number;
}

export interface FileUploadResponse {
  originalFileName?: string;
  fileUrl?: string;
  contentType?: string;
  directory?: string;
}

export type GrobleResponseListFileUploadResponseStatus =
  (typeof GrobleResponseListFileUploadResponseStatus)[keyof typeof GrobleResponseListFileUploadResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseListFileUploadResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseListFileUploadResponse {
  status?: GrobleResponseListFileUploadResponseStatus;
  code?: number;
  message?: string;
  data?: FileUploadResponse[];
  error?: ErrorDetail;
  timestamp?: string;
}

export interface ContentStatusResponse {
  /** 상품 ID */
  contentId?: number;
  /** 변경된 상품 상태 */
  status?: string;
}

/**
 * 코칭 옵션 목록 (contentType이 COACHING인 경우)
 */
export interface CoachingOptionRegisterRequest {
  /** 옵션 이름 */
  name: string;
  /** 옵션 설명 */
  description: string;
  /**
   * 가격
   * @minimum 0
   */
  price: number;
  /**
   * 코칭 기간
   * @pattern ^(ONE_DAY|TWO_TO_SIX_DAYS|MORE_THAN_ONE_WEEK)$
   */
  coachingPeriod: string;
  /**
   * 자료 제공 여부
   * @pattern ^(PROVIDED|NOT_PROVIDED)$
   */
  documentProvision: string;
  /**
   * 코칭 방식
   * @pattern ^(ONLINE|OFFLINE)$
   */
  coachingType: string;
  /** 코칭 방식 설명 */
  coachingTypeDescription: string;
}

export interface ContentRegisterRequest {
  /** 상품 ID */
  contentId?: number;
  /**
   * 컨텐츠 이름
   * @minLength 0
   * @maxLength 30
   */
  title: string;
  /**
   * 컨텐츠 유형
   * @pattern ^(COACHING|DOCUMENT)$
   */
  contentType: string;
  /** 카테고리 ID */
  categoryId: number;
  /** 썸네일 이미지 URL */
  thumbnailUrl: string;
  /** 코칭 옵션 목록 (contentType이 COACHING인 경우) */
  coachingOptions?: CoachingOptionRegisterRequest[];
  /** 문서 옵션 목록 (contentType이 DOCUMENT인 경우) */
  documentOptions?: DocumentOptionRegisterRequest[];
}

/**
 * 문서 옵션 목록 (contentType이 DOCUMENT인 경우)
 */
export interface DocumentOptionRegisterRequest {
  /** 옵션 이름 */
  name?: string;
  /** 옵션 설명 */
  description?: string;
  /**
   * 가격
   * @minimum 0
   */
  price?: number;
  /**
   * 컨텐츠 제공 방식
   * @pattern ^(IMMEDIATE_DOWNLOAD|FUTURE_UPLOAD)$
   */
  contentDeliveryMethod: string;
}

export interface ContentResponse {
  /** 상품 ID */
  id?: number;
  /** 컨텐츠 이름 */
  title?: string;
  /** 컨텐츠 유형 */
  contentType?: string;
  /** 카테고리 ID */
  categoryId?: number;
  /** 카테고리 이름 */
  categoryName?: string;
  /** 썸네일 이미지 URL */
  thumbnailUrl?: string;
  /** 상품 상태 */
  status?: string;
  /** 옵션 목록 */
  options?: OptionResponse[];
}

/**
 * 옵션 목록
 */
export interface OptionResponse {
  /** 옵션 ID */
  id?: number;
  /** 옵션 이름 */
  name?: string;
  /** 옵션 설명 */
  description?: string;
  /** 가격 */
  price?: number;
  /** 코칭 기간 */
  coachingPeriod?: string;
  /** 자료 제공 여부 */
  documentProvision?: string;
  /** 코칭 방식 */
  coachingType?: string;
  /** 코칭 방식 설명 */
  coachingTypeDescription?: string;
  /** 컨텐츠 제공 방식 */
  contentDeliveryMethod?: string;
}

/**
 * 코칭 옵션 목록 (contentType이 COACHING인 경우)
 */
export interface CoachingOptionDraftRequest {
  /** 옵션 이름 */
  name?: string;
  /** 옵션 설명 */
  description?: string;
  /**
   * 가격
   * @minimum 0
   */
  price?: number;
  /**
   * 코칭 기간
   * @pattern ^(ONE_DAY|TWO_TO_SIX_DAYS|MORE_THAN_ONE_WEEK)$
   */
  coachingPeriod?: string;
  /**
   * 자료 제공 여부
   * @pattern ^(PROVIDED|NOT_PROVIDED)$
   */
  documentProvision?: string;
  /**
   * 코칭 방식
   * @pattern ^(ONLINE|OFFLINE)$
   */
  coachingType?: string;
  /** 코칭 방식 설명 */
  coachingTypeDescription?: string;
}

export interface ContentDraftRequest {
  /** 상품 ID */
  contentId?: number;
  /**
   * 컨텐츠 이름
   * @minLength 0
   * @maxLength 30
   */
  title?: string;
  /**
   * 컨텐츠 유형
   * @pattern ^(COACHING|DOCUMENT)$
   */
  contentType?: string;
  /** 카테고리 ID */
  categoryId?: number;
  /** 썸네일 이미지 URL */
  thumbnailUrl?: string;
  /** 코칭 옵션 목록 (contentType이 COACHING인 경우) */
  coachingOptions?: CoachingOptionDraftRequest[];
  /** 문서 옵션 목록 (contentType이 DOCUMENT인 경우) */
  documentOptions?: DocumentOptionDraftRequest[];
}

/**
 * 문서 옵션 목록 (contentType이 DOCUMENT인 경우)
 */
export interface DocumentOptionDraftRequest {
  /** 옵션 이름 */
  name?: string;
  /** 옵션 설명 */
  description?: string;
  /**
   * 가격
   * @minimum 0
   */
  price?: number;
  /**
   * 컨텐츠 제공 방식
   * @pattern ^(IMMEDIATE_DOWNLOAD|FUTURE_UPLOAD)$
   */
  contentDeliveryMethod: string;
}

/**
 * 이메일 인증 코드 검증 요청
 */
export interface VerifyEmailCodeRequest {
  /** 사용자 이메일 */
  email: string;
  /**
   * 이메일로 발송된 인증 코드
   * @minLength 4
   * @maxLength 4
   */
  verificationCode: string;
}

export type GrobleResponseSignInResponseStatus =
  (typeof GrobleResponseSignInResponseStatus)[keyof typeof GrobleResponseSignInResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseSignInResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseSignInResponse {
  status?: GrobleResponseSignInResponseStatus;
  code?: number;
  message?: string;
  data?: SignInResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface SignInResponse {
  email?: string;
  authenticated?: boolean;
  userType?: string;
  nextRoutePath?: string;
}

export interface NicknameRequest {
  /**
   * 닉네임
   * @pattern ^[가-힣a-zA-Z0-9]{2,15}$
   */
  nickname: string;
}

export type GrobleResponseUpdateNicknameResponseStatus =
  (typeof GrobleResponseUpdateNicknameResponseStatus)[keyof typeof GrobleResponseUpdateNicknameResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseUpdateNicknameResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseUpdateNicknameResponse {
  status?: GrobleResponseUpdateNicknameResponseStatus;
  code?: number;
  message?: string;
  data?: UpdateNicknameResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface UpdateNicknameResponse {
  nickname?: string;
}

/**
 * 약관 동의 유형
 */
export type SignUpRequestTermsTypesItem =
  (typeof SignUpRequestTermsTypesItem)[keyof typeof SignUpRequestTermsTypesItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SignUpRequestTermsTypesItem = {
  AGE_POLICY: "AGE_POLICY",
  SELLER_TERMS_POLICY: "SELLER_TERMS_POLICY",
  PRIVACY_POLICY: "PRIVACY_POLICY",
  SERVICE_TERMS_POLICY: "SERVICE_TERMS_POLICY",
  SALES_TERMS_POLICY: "SALES_TERMS_POLICY",
  MARKETING_POLICY: "MARKETING_POLICY",
  ADVERTISING_POLICY: "ADVERTISING_POLICY",
} as const;

/**
 * 회원가입 정보
 */
export interface SignUpRequest {
  /**
   * 사용자 유형
   * @pattern ^(SELLER|BUYER)$
   */
  userType: string;
  /** 약관 동의 유형 */
  termsTypes: SignUpRequestTermsTypesItem[];
  /** 인증된 이메일 */
  email: string;
  /**
   * 비밀번호
   * @minLength 8
   * @maxLength 32
   * @pattern ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{8,}$
   */
  password: string;
  /**
   * 닉네임
   * @pattern ^[가-힣a-zA-Z0-9]{2,15}$
   */
  nickname: string;
}

export type GrobleResponseSignUpResponseStatus =
  (typeof GrobleResponseSignUpResponseStatus)[keyof typeof GrobleResponseSignUpResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseSignUpResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseSignUpResponse {
  status?: GrobleResponseSignUpResponseStatus;
  code?: number;
  message?: string;
  data?: SignUpResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface SignUpResponse {
  email?: string;
  authenticated?: boolean;
}

/**
 * 회원가입 정보
 */
export interface DeprecatedSignUpRequest {
  email: string;
  /**
   * @minLength 8
   * @maxLength 32
   * @pattern ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{8,}$
   */
  password: string;
}

/**
 * 로그인 정보
 */
export interface SignInRequest {
  /** 사용자 이메일 */
  email: string;
  /**
   * 사용자 비밀번호
   * @minLength 6
   * @maxLength 32
   * @pattern ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{6,}$
   */
  password: string;
}

export interface ResetPasswordRequest {
  /**
   * @minLength 8
   * @maxLength 32
   * @pattern ^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*]).{8,}$
   */
  newPassword: string;
  token: string;
}

/**
 * 이메일 인증 정보
 */
export interface EmailVerificationRequest {
  email: string;
}

export interface VirtualAccountRequest {
  orderId: number;
  bankCode: string;
  dueDate: string;
}

export interface PaymentCancelRequest {
  paymentKey: string;
  amount: number;
  reason: string;
}

/**
 * 구매자 마이페이지 요약 정보 응답
 */
export interface BuyerMyPageSummaryResponse {
  /** 사용자 닉네임 */
  nickname?: string;
  /** 사용자 프로필 이미지 URL */
  profileImageUrl?: string;
  userType?: EnumResponse;
  /** 판매자 계정 전환 가능 여부 */
  canSwitchToSeller?: boolean;
}

/**
 * Enum 공통 응답 (코드 + 설명)
 */
export interface EnumResponse {
  /** Enum 코드 값 */
  code?: string;
  /** Enum 설명 */
  description?: string;
}

/**
 * 판매자 마이페이지 요약 정보 응답
 */
export interface SellerMyPageSummaryResponse {
  /** 사용자 닉네임 */
  nickname?: string;
  /** 사용자 프로필 이미지 URL */
  profileImageUrl?: string;
  userType?: EnumResponse;
  verificationStatus?: EnumResponse;
}

/**
 * 사용자 유형별 응답 객체
 */
export type MyPageSummaryResponseBase =
  | (BuyerMyPageSummaryResponse & {
      profileImageUrl?: string;
      userType?: EnumResponse;
      nickname?: string;
    })
  | (SellerMyPageSummaryResponse & {
      profileImageUrl?: string;
      userType?: EnumResponse;
      nickname?: string;
    });

/**
 * 마이페이지 요약 정보 응답
 */
export interface UserMyPageSummaryResponse {
  data?: MyPageSummaryResponseBase;
  /** 사용자 유형 코드 */
  userType?: string;
}

export interface UserMyPageDetailResponse {
  /** 사용자 닉네임 */
  nickname?: string;
  accountType?: EnumResponse;
  providerType?: EnumResponse;
  /** 이메일 */
  email?: string;
  /** 프로필 이미지 URL */
  profileImageUrl?: string;
  /** 전화번호 */
  phoneNumber?: string;
  /** 판매자 계정 미생성 여부 */
  sellerAccountNotCreated?: boolean;
}

export type GrobleResponseBooleanStatus =
  (typeof GrobleResponseBooleanStatus)[keyof typeof GrobleResponseBooleanStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseBooleanStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseBoolean {
  status?: GrobleResponseBooleanStatus;
  code?: number;
  message?: string;
  data?: boolean;
  error?: ErrorDetail;
  timestamp?: string;
}

/**
 * 커서 기반 페이지네이션 요청
 */
export interface CursorRequest {
  /** 다음 페이지 요청에 사용할 커서 (첫 페이지는 null 또는 빈 문자열) */
  cursor?: string;
  /**
   * 요청 페이지 크기 (최소 1)
   * @minimum 1
   */
  size: number;
  /** 정렬 기준 필드명 */
  sortBy?: string;
  /** 내림차순 정렬 여부 (true: 내림차순, false: 오름차순) */
  sortDesc?: boolean;
  first?: boolean;
}

/**
 * 상품 상태
 */
export type ContentPreviewCardResponseStatus =
  (typeof ContentPreviewCardResponseStatus)[keyof typeof ContentPreviewCardResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContentPreviewCardResponseStatus = {
  DRAFT: "DRAFT",
  PENDING: "PENDING",
  ACTIVE: "ACTIVE",
  APPROVED: "APPROVED",
  REJECTED: "REJECTED",
} as const;

/**
 * 상품 미리보기 카드 응답 DTO
 */
export interface ContentPreviewCardResponse {
  /** 상품 ID */
  contentId?: number;
  /** 생성 일시 */
  createdAt?: string;
  /** 상품 제목 */
  title?: string;
  /** 썸네일 이미지 URL */
  thumbnailUrl?: string;
  /** 판매자 이름 */
  sellerName?: string;
  /** 상품 최저가 가격 */
  lowestPrice?: number;
  /** 상품 상태 */
  status?: ContentPreviewCardResponseStatus;
}

export interface CursorResponseContentPreviewCardResponse {
  items?: ContentPreviewCardResponse[];
  nextCursor?: string;
  hasNext?: boolean;
  totalCount?: number;
  meta?: MetaData;
}

export type GrobleResponseCursorResponseContentPreviewCardResponseStatus =
  (typeof GrobleResponseCursorResponseContentPreviewCardResponseStatus)[keyof typeof GrobleResponseCursorResponseContentPreviewCardResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseCursorResponseContentPreviewCardResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseCursorResponseContentPreviewCardResponse {
  status?: GrobleResponseCursorResponseContentPreviewCardResponseStatus;
  code?: number;
  message?: string;
  data?: CursorResponseContentPreviewCardResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface MetaData {
  searchTerm?: string;
  filter?: string;
  sortBy?: string;
  cursorType?: string;
}

export type GrobleResponseMapStringStringStatus =
  (typeof GrobleResponseMapStringStringStatus)[keyof typeof GrobleResponseMapStringStringStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseMapStringStringStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export type GrobleResponseMapStringStringData = { [key: string]: string };

export interface GrobleResponseMapStringString {
  status?: GrobleResponseMapStringStringStatus;
  code?: number;
  message?: string;
  data?: GrobleResponseMapStringStringData;
  error?: ErrorDetail;
  timestamp?: string;
}

/**
 * 서비스 상품 상세 정보 응답
 */
export interface ContentDetailResponse {
  /** 상품 ID */
  id?: number;
  /** 컨텐츠 유형 */
  contentType?: string;
  /** 카테고리 ID */
  categoryId?: number;
  /** 컨텐츠 이름 */
  title?: string;
  /** 판매자 프로필 이미지 URL */
  sellerProfileImageUrl?: string;
  /** 판매자 이름 */
  sellerName?: string;
  /** 상품 옵션 목록 */
  options?: ContentOptionResponse[];
}

/**
 * 서비스 상품 옵션 정보 응답
 */
export interface ContentOptionResponse {
  /** 옵션 ID */
  id?: number;
  /** 옵션 유형 */
  optionType?: string;
  /** 옵션 이름 */
  name?: string;
  /** 옵션 설명 */
  description?: string;
  /** 옵션 가격 */
  price?: number;
}

export type GrobleResponseNicknameDuplicateCheckResponseStatus =
  (typeof GrobleResponseNicknameDuplicateCheckResponseStatus)[keyof typeof GrobleResponseNicknameDuplicateCheckResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GrobleResponseNicknameDuplicateCheckResponseStatus = {
  SUCCESS: "SUCCESS",
  ERROR: "ERROR",
  FAIL: "FAIL",
} as const;

export interface GrobleResponseNicknameDuplicateCheckResponse {
  status?: GrobleResponseNicknameDuplicateCheckResponseStatus;
  code?: number;
  message?: string;
  data?: NicknameDuplicateCheckResponse;
  error?: ErrorDetail;
  timestamp?: string;
}

export interface NicknameDuplicateCheckResponse {
  nickname?: string;
  duplicated?: boolean;
}

export type HandleBankAccountWebhookBody = {
  [key: string]: { [key: string]: unknown };
};

export type HandlePaymentWebhookBody = {
  [key: string]: { [key: string]: unknown };
};

export type SwitchUserTypeParams = {
  accessor: Accessor;
};

export type WithdrawTermsAgreementParams = {
  accessor: Accessor;
};

export type GetAdvertisingAgreementStatusParams = {
  accessor: Accessor;
};

export type UpdateAdvertisingAgreementStatusParams = {
  accessor: Accessor;
};

export type AgreeToTermsParams = {
  accessor: Accessor;
};

export type CreateOrderParams = {
  accessor: Accessor;
};

export type UploadFileParams = {
  accessor: Accessor;
  fileType?: string;
  directory?: string;
};

export type UploadFileBody = {
  file: Blob;
};

export type UploadContentsFilesParams = {
  accessor: Accessor;
  files: Blob[];
  directory?: string;
};

export type UploadContentThumbnailParams = {
  accessor: Accessor;
  directory?: string;
};

export type UploadContentThumbnailBody = {
  file: Blob;
};

export type VerifyEmailCodeForChangeEmailParams = {
  accessor: Accessor;
};

export type ValidateTokenParams = {
  accessor: Accessor;
};

export type UpdateNicknameParams = {
  accessor: Accessor;
};

export type ResetPasswordParams = {
  accessor: Accessor;
};

export type LogoutParams = {
  accessor: Accessor;
};

export type SetInitialUserTypeParams = {
  accessor: Accessor;
};

export type SendEmailVerificationForChangeEmailParams = {
  accessor: Accessor;
};

export type HandleWebhookBody = { [key: string]: { [key: string]: unknown } };

export type HandleWebhook200 = { [key: string]: string };

export type GetUserMyPageSummaryParams = {
  accessor: Accessor;
};

export type GetUserMyPageSummary200 =
  | BuyerMyPageSummaryResponse
  | SellerMyPageSummaryResponse;

export type GetUserMyPageDetailParams = {
  accessor: Accessor;
};

export type GetUserTermsAgreementsParams = {
  accessor: Accessor;
};

export type GetMyPurchasingContentsParams = {
  /**
   * 커서 기반 페이지네이션 요청 정보
   */
  cursorRequest: CursorRequest;
  /**
   * 구매한 상품 상태 필터 (PENDING, PAID, EXPIRED, CANCELLED)
   */
  state?: string;
  /**
   * 상품 타입 (COACHING 또는 DOCUMENT)
   */
  type: string;
};

export type AuthorizeParams = {
  redirect_uri?: string;
  provider: string;
};

export type GetMySellingContentsParams = {
  /**
   * 커서 기반 페이지네이션 요청 정보
   */
  cursorRequest: CursorRequest;
  /**
   * 상품 상태 필터 (DRAFT, PENDING, ACTIVE 등)
   */
  state?: string;
  /**
   * 상품 타입 (COACHING 또는 DOCUMENT)
   */
  type: string;
};

export type GetHomeContentsParams = {
  /**
   * 커서 기반 페이지네이션 요청 정보
   */
  cursorRequest: CursorRequest;
  /**
   * 상품 타입 (COACHING 또는 DOCUMENT)
   */
  type: string;
};

export type CheckNicknameDuplicateParams = {
  nickname: string;
};

export type handleBankAccountWebhookResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type handleBankAccountWebhookResponseComposite =
  handleBankAccountWebhookResponse200;

export type handleBankAccountWebhookResponse =
  handleBankAccountWebhookResponseComposite & {
    headers: Headers;
  };

export const getHandleBankAccountWebhookUrl = () => {
  return `https://api.dev.groble.im/api/webhook/bank-account`;
};

export const handleBankAccountWebhook = async (
  handleBankAccountWebhookBody: HandleBankAccountWebhookBody,
  options?: RequestInit,
): Promise<handleBankAccountWebhookResponse> => {
  return customFetch<handleBankAccountWebhookResponse>(
    getHandleBankAccountWebhookUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(handleBankAccountWebhookBody),
    },
  );
};

export type handlePaymentWebhookResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type handlePaymentWebhookResponseComposite =
  handlePaymentWebhookResponse200;

export type handlePaymentWebhookResponse =
  handlePaymentWebhookResponseComposite & {
    headers: Headers;
  };

export const getHandlePaymentWebhookUrl = () => {
  return `https://api.dev.groble.im/api/v1/webhook/payment`;
};

export const handlePaymentWebhook = async (
  handlePaymentWebhookBody: HandlePaymentWebhookBody,
  options?: RequestInit,
): Promise<handlePaymentWebhookResponse> => {
  return customFetch<handlePaymentWebhookResponse>(
    getHandlePaymentWebhookUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(handlePaymentWebhookBody),
    },
  );
};

/**
 * 판매자 또는 구매자로 가입 유형을 전환합니다.
 * @summary 가입 유형 전환
 */
export type switchUserTypeResponse204 = {
  data: void;
  status: 204;
};

export type switchUserTypeResponse400 = {
  data: void;
  status: 400;
};

export type switchUserTypeResponseComposite =
  | switchUserTypeResponse204
  | switchUserTypeResponse400;

export type switchUserTypeResponse = switchUserTypeResponseComposite & {
  headers: Headers;
};

export const getSwitchUserTypeUrl = (params: SwitchUserTypeParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/users/switch-role?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/users/switch-role`;
};

export const switchUserType = async (
  userTypeRequest: UserTypeRequest,
  params: SwitchUserTypeParams,
  options?: RequestInit,
): Promise<switchUserTypeResponse> => {
  return customFetch<switchUserTypeResponse>(getSwitchUserTypeUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userTypeRequest),
  });
};

/**
 * 사용자가 동의한 약관을 철회합니다. 필수 약관은 철회할 수 없습니다.
 * @summary 약관 동의 철회
 */
export type withdrawTermsAgreementResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type withdrawTermsAgreementResponse400 = {
  data: GrobleResponseTermsAgreementResponse;
  status: 400;
};

export type withdrawTermsAgreementResponseComposite =
  | withdrawTermsAgreementResponse200
  | withdrawTermsAgreementResponse400;

export type withdrawTermsAgreementResponse =
  withdrawTermsAgreementResponseComposite & {
    headers: Headers;
  };

export const getWithdrawTermsAgreementUrl = (
  params: WithdrawTermsAgreementParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/terms/withdraw?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/terms/withdraw`;
};

export const withdrawTermsAgreement = async (
  termsAgreementRequest: TermsAgreementRequest,
  params: WithdrawTermsAgreementParams,
  options?: RequestInit,
): Promise<withdrawTermsAgreementResponse> => {
  return customFetch<withdrawTermsAgreementResponse>(
    getWithdrawTermsAgreementUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(termsAgreementRequest),
    },
  );
};

/**
 * 현재 로그인한 사용자의 광고성 정보 수신 동의 여부를 조회합니다.
 * @summary 광고성 정보 수신 동의 여부 조회
 */
export type getAdvertisingAgreementStatusResponse200 = {
  data: GrobleResponseBoolean;
  status: 200;
};

export type getAdvertisingAgreementStatusResponseComposite =
  getAdvertisingAgreementStatusResponse200;

export type getAdvertisingAgreementStatusResponse =
  getAdvertisingAgreementStatusResponseComposite & {
    headers: Headers;
  };

export const getGetAdvertisingAgreementStatusUrl = (
  params: GetAdvertisingAgreementStatusParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/terms/users/me/advertising-agreement?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/terms/users/me/advertising-agreement`;
};

export const getAdvertisingAgreementStatus = async (
  params: GetAdvertisingAgreementStatusParams,
  options?: RequestInit,
): Promise<getAdvertisingAgreementStatusResponse> => {
  return customFetch<getAdvertisingAgreementStatusResponse>(
    getGetAdvertisingAgreementStatusUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 현재 로그인한 사용자의 광고성 정보 수신 동의 여부를 변경합니다.
 * @summary 광고성 정보 수신 동의 변경
 */
export type updateAdvertisingAgreementStatusResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type updateAdvertisingAgreementStatusResponseComposite =
  updateAdvertisingAgreementStatusResponse200;

export type updateAdvertisingAgreementStatusResponse =
  updateAdvertisingAgreementStatusResponseComposite & {
    headers: Headers;
  };

export const getUpdateAdvertisingAgreementStatusUrl = (
  params: UpdateAdvertisingAgreementStatusParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/terms/users/me/advertising-agreement?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/terms/users/me/advertising-agreement`;
};

export const updateAdvertisingAgreementStatus = async (
  advertisingAgreementRequest: AdvertisingAgreementRequest,
  params: UpdateAdvertisingAgreementStatusParams,
  options?: RequestInit,
): Promise<updateAdvertisingAgreementStatusResponse> => {
  return customFetch<updateAdvertisingAgreementStatusResponse>(
    getUpdateAdvertisingAgreementStatusUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(advertisingAgreementRequest),
    },
  );
};

/**
 * 사용자가 회원가입 과정에서 약관에 동의합니다.
 * @summary 회원가입 약관 동의
 */
export type agreeToTermsResponse200 = {
  data: GrobleResponseTermsAgreementResponse;
  status: 200;
};

export type agreeToTermsResponseComposite = agreeToTermsResponse200;

export type agreeToTermsResponse = agreeToTermsResponseComposite & {
  headers: Headers;
};

export const getAgreeToTermsUrl = (params: AgreeToTermsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/terms/agree?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/terms/agree`;
};

export const agreeToTerms = async (
  termsAgreementRequest: TermsAgreementRequest,
  params: AgreeToTermsParams,
  options?: RequestInit,
): Promise<agreeToTermsResponse> => {
  return customFetch<agreeToTermsResponse>(getAgreeToTermsUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(termsAgreementRequest),
  });
};

export type preparePaymentResponse200 = {
  data: GrobleResponsePaymentPrepareResponse;
  status: 200;
};

export type preparePaymentResponseComposite = preparePaymentResponse200;

export type preparePaymentResponse = preparePaymentResponseComposite & {
  headers: Headers;
};

export const getPreparePaymentUrl = () => {
  return `https://api.dev.groble.im/api/v1/payments/prepare`;
};

export const preparePayment = async (
  paymentPrepareRequest: PaymentPrepareRequest,
  options?: RequestInit,
): Promise<preparePaymentResponse> => {
  return customFetch<preparePaymentResponse>(getPreparePaymentUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(paymentPrepareRequest),
  });
};

export type approvePaymentResponse200 = {
  data: GrobleResponsePaymentResponse;
  status: 200;
};

export type approvePaymentResponseComposite = approvePaymentResponse200;

export type approvePaymentResponse = approvePaymentResponseComposite & {
  headers: Headers;
};

export const getApprovePaymentUrl = () => {
  return `https://api.dev.groble.im/api/v1/payments/approve`;
};

export const approvePayment = async (
  paymentApproveRequest: PaymentApproveRequest,
  options?: RequestInit,
): Promise<approvePaymentResponse> => {
  return customFetch<approvePaymentResponse>(getApprovePaymentUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(paymentApproveRequest),
  });
};

/**
 * 상품 정보를 받아 주문을 생성하고 주문 ID를 반환합니다.
 * @summary 주문 생성
 */
export type createOrderResponse201 = {
  data: OrderResponse;
  status: 201;
};

export type createOrderResponseComposite = createOrderResponse201;

export type createOrderResponse = createOrderResponseComposite & {
  headers: Headers;
};

export const getCreateOrderUrl = (params: CreateOrderParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/orders?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/orders`;
};

export const createOrder = async (
  createOrderRequest: CreateOrderRequest,
  params: CreateOrderParams,
  options?: RequestInit,
): Promise<createOrderResponse> => {
  return customFetch<createOrderResponse>(getCreateOrderUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createOrderRequest),
  });
};

/**
 * 폼 데이터를 통해 다양한 유형의 파일을 업로드합니다. fileType 파라미터를 통해 파일 저장 위치를 자동으로 결정하거나 directory 파라미터로 직접 지정할 수 있습니다.
 * @summary 단건 파일 업로드
 */
export type uploadFileResponse201 = {
  data: FileUploadResponse;
  status: 201;
};

export type uploadFileResponse400 = {
  data: FileUploadResponse;
  status: 400;
};

export type uploadFileResponseComposite =
  | uploadFileResponse201
  | uploadFileResponse400;

export type uploadFileResponse = uploadFileResponseComposite & {
  headers: Headers;
};

export const getUploadFileUrl = (params: UploadFileParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/file?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/file`;
};

export const uploadFile = async (
  uploadFileBody: UploadFileBody,
  params: UploadFileParams,
  options?: RequestInit,
): Promise<uploadFileResponse> => {
  const formData = new FormData();
  formData.append(`file`, uploadFileBody.file);

  return customFetch<uploadFileResponse>(getUploadFileUrl(params), {
    ...options,
    method: "POST",
    body: formData,
  });
};

/**
 * 즉시 다운로드에 대한 여러 컨텐츠 파일을 한 번에 업로드합니다. 비어있지 않은 파일만 처리합니다.
 * @summary 여러 컨텐츠 파일 업로드
 */
export type uploadContentsFilesResponse201 = {
  data: string;
  status: 201;
};

export type uploadContentsFilesResponse400 = {
  data: GrobleResponseListFileUploadResponse;
  status: 400;
};

export type uploadContentsFilesResponseComposite =
  | uploadContentsFilesResponse201
  | uploadContentsFilesResponse400;

export type uploadContentsFilesResponse =
  uploadContentsFilesResponseComposite & {
    headers: Headers;
  };

export const getUploadContentsFilesUrl = (
  params: UploadContentsFilesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/direct-contents?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/direct-contents`;
};

export const uploadContentsFiles = async (
  params: UploadContentsFilesParams,
  options?: RequestInit,
): Promise<uploadContentsFilesResponse> => {
  return customFetch<uploadContentsFilesResponse>(
    getUploadContentsFilesUrl(params),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * 심사완료된 컨텐츠를 활성화합니다.
 * @summary 컨텐츠 활성화
 */
export type activateContentResponse200 = {
  data: ContentStatusResponse;
  status: 200;
};

export type activateContentResponseComposite = activateContentResponse200;

export type activateContentResponse = activateContentResponseComposite & {
  headers: Headers;
};

export const getActivateContentUrl = (contentId: number) => {
  return `https://api.dev.groble.im/api/v1/contents/${contentId}/active`;
};

export const activateContent = async (
  contentId: number,
  options?: RequestInit,
): Promise<activateContentResponse> => {
  return customFetch<activateContentResponse>(
    getActivateContentUrl(contentId),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * 작성 완료한 컨텐츠에 대해 심사를 요청합니다.
 * @summary 컨텐츠 심사 요청
 */
export type registerContentResponse200 = {
  data: ContentResponse;
  status: 200;
};

export type registerContentResponseComposite = registerContentResponse200;

export type registerContentResponse = registerContentResponseComposite & {
  headers: Headers;
};

export const getRegisterContentUrl = () => {
  return `https://api.dev.groble.im/api/v1/contents/register`;
};

export const registerContent = async (
  contentRegisterRequest: ContentRegisterRequest,
  options?: RequestInit,
): Promise<registerContentResponse> => {
  return customFetch<registerContentResponse>(getRegisterContentUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(contentRegisterRequest),
  });
};

/**
 * 컨텐츠를 임시 저장합니다.
 * @summary 컨텐츠 임시 저장
 */
export type saveDraftResponse200 = {
  data: ContentResponse;
  status: 200;
};

export type saveDraftResponseComposite = saveDraftResponse200;

export type saveDraftResponse = saveDraftResponseComposite & {
  headers: Headers;
};

export const getSaveDraftUrl = () => {
  return `https://api.dev.groble.im/api/v1/contents/draft`;
};

export const saveDraft = async (
  contentDraftRequest: ContentDraftRequest,
  options?: RequestInit,
): Promise<saveDraftResponse> => {
  return customFetch<saveDraftResponse>(getSaveDraftUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(contentDraftRequest),
  });
};

/**
 * 컨텐츠 대표 이미지를 업로드합니다. 이미지 파일만 업로드 가능하며, 다른 파일 형식은 오류가 발생합니다.
 * @summary 컨텐츠 대표 이미지 업로드
 */
export type uploadContentThumbnailResponse201 = {
  data: FileUploadResponse;
  status: 201;
};

export type uploadContentThumbnailResponse400 = {
  data: FileUploadResponse;
  status: 400;
};

export type uploadContentThumbnailResponseComposite =
  | uploadContentThumbnailResponse201
  | uploadContentThumbnailResponse400;

export type uploadContentThumbnailResponse =
  uploadContentThumbnailResponseComposite & {
    headers: Headers;
  };

export const getUploadContentThumbnailUrl = (
  params: UploadContentThumbnailParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/content/thumbnail?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/content/thumbnail`;
};

export const uploadContentThumbnail = async (
  uploadContentThumbnailBody: UploadContentThumbnailBody,
  params: UploadContentThumbnailParams,
  options?: RequestInit,
): Promise<uploadContentThumbnailResponse> => {
  const formData = new FormData();
  formData.append(`file`, uploadContentThumbnailBody.file);

  return customFetch<uploadContentThumbnailResponse>(
    getUploadContentThumbnailUrl(params),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );
};

/**
 * 이메일로 발송된 인증 코드의 유효성을 검증합니다.
 * @summary 회원가입 시 이메일 인증 코드 확인
 */
export type verifyEmailCodeResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type verifyEmailCodeResponseComposite = verifyEmailCodeResponse200;

export type verifyEmailCodeResponse = verifyEmailCodeResponseComposite & {
  headers: Headers;
};

export const getVerifyEmailCodeUrl = () => {
  return `https://api.dev.groble.im/api/v1/auth/verify-code/sign-up`;
};

export const verifyEmailCode = async (
  verifyEmailCodeRequest: VerifyEmailCodeRequest,
  options?: RequestInit,
): Promise<verifyEmailCodeResponse> => {
  return customFetch<verifyEmailCodeResponse>(getVerifyEmailCodeUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(verifyEmailCodeRequest),
  });
};

/**
 * 이메일 변경 시 인증 코드의 유효성을 검증하고 이메일을 변경합니다.
 * @summary 이메일 변경 시 이메일 인증 코드 확인
 */
export type verifyEmailCodeForChangeEmailResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type verifyEmailCodeForChangeEmailResponseComposite =
  verifyEmailCodeForChangeEmailResponse200;

export type verifyEmailCodeForChangeEmailResponse =
  verifyEmailCodeForChangeEmailResponseComposite & {
    headers: Headers;
  };

export const getVerifyEmailCodeForChangeEmailUrl = (
  params: VerifyEmailCodeForChangeEmailParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/auth/verify-code/change-email?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/auth/verify-code/change-email`;
};

export const verifyEmailCodeForChangeEmail = async (
  verifyEmailCodeRequest: VerifyEmailCodeRequest,
  params: VerifyEmailCodeForChangeEmailParams,
  options?: RequestInit,
): Promise<verifyEmailCodeForChangeEmailResponse> => {
  return customFetch<verifyEmailCodeForChangeEmailResponse>(
    getVerifyEmailCodeForChangeEmailUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(verifyEmailCodeRequest),
    },
  );
};

/**
 * 현재 사용자의 인증 토큰을 검증하고 로그인 상태를 확인합니다.
 * @summary 토큰 검증
 */
export type validateTokenResponse200 = {
  data: GrobleResponseSignInResponse;
  status: 200;
};

export type validateTokenResponseComposite = validateTokenResponse200;

export type validateTokenResponse = validateTokenResponseComposite & {
  headers: Headers;
};

export const getValidateTokenUrl = (params: ValidateTokenParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/auth/validate-token?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/auth/validate-token`;
};

export const validateToken = async (
  params: ValidateTokenParams,
  options?: RequestInit,
): Promise<validateTokenResponse> => {
  return customFetch<validateTokenResponse>(getValidateTokenUrl(params), {
    ...options,
    method: "POST",
  });
};

/**
 * 닉네임을 수정합니다.
 * @summary 닉네임 수정
 */
export type updateNicknameResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type updateNicknameResponse401 = {
  data: GrobleResponseUpdateNicknameResponse;
  status: 401;
};

export type updateNicknameResponseComposite =
  | updateNicknameResponse200
  | updateNicknameResponse401;

export type updateNicknameResponse = updateNicknameResponseComposite & {
  headers: Headers;
};

export const getUpdateNicknameUrl = (params: UpdateNicknameParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/auth/users/nickname?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/auth/users/nickname`;
};

export const updateNickname = async (
  nicknameRequest: NicknameRequest,
  params: UpdateNicknameParams,
  options?: RequestInit,
): Promise<updateNicknameResponse> => {
  return customFetch<updateNicknameResponse>(getUpdateNicknameUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(nicknameRequest),
  });
};

/**
 * 새로운 사용자를 등록하고 인증 토큰을 발급합니다.
 * @summary 통합 회원가입 (유형, 약관, 이메일(인증된), 비밀번호, 닉네임)
 */
export type signUpResponse200 = {
  data: GrobleResponseSignUpResponse;
  status: 200;
};

export type signUpResponseComposite = signUpResponse200;

export type signUpResponse = signUpResponseComposite & {
  headers: Headers;
};

export const getSignUpUrl = () => {
  return `https://api.dev.groble.im/api/v1/auth/sign-up`;
};

export const signUp = async (
  signUpRequest: SignUpRequest,
  options?: RequestInit,
): Promise<signUpResponse> => {
  return customFetch<signUpResponse>(getSignUpUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(signUpRequest),
  });
};

/**
 * 새로운 사용자를 등록하고 인증 토큰을 발급합니다.
 * @deprecated
 * @summary 통합 회원가입 [deprecated]
 */
export type signUp1Response200 = {
  data: GrobleResponseSignUpResponse;
  status: 200;
};

export type signUp1ResponseComposite = signUp1Response200;

export type signUp1Response = signUp1ResponseComposite & {
  headers: Headers;
};

export const getSignUp1Url = () => {
  return `https://api.dev.groble.im/api/v1/auth/sign-up/deprecated`;
};

export const signUp1 = async (
  deprecatedSignUpRequest: DeprecatedSignUpRequest,
  options?: RequestInit,
): Promise<signUp1Response> => {
  return customFetch<signUp1Response>(getSignUp1Url(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(deprecatedSignUpRequest),
  });
};

/**
 * 이메일과 비밀번호로 로그인하고 인증 토큰을 발급합니다.
 * @summary 로그인
 */
export type signInResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type signInResponse400 = {
  data: GrobleResponseSignInResponse;
  status: 400;
};

export type signInResponseComposite = signInResponse200 | signInResponse400;

export type signInResponse = signInResponseComposite & {
  headers: Headers;
};

export const getSignInUrl = () => {
  return `https://api.dev.groble.im/api/v1/auth/sign-in`;
};

export const signIn = async (
  signInRequest: SignInRequest,
  options?: RequestInit,
): Promise<signInResponse> => {
  return customFetch<signInResponse>(getSignInUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(signInRequest),
  });
};

/**
 * 리프레시 토큰을 사용하여 새로운 액세스 토큰을 발급합니다.
 * @summary accessToken 재발급
 */
export type refreshTokenResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type refreshTokenResponseComposite = refreshTokenResponse200;

export type refreshTokenResponse = refreshTokenResponseComposite & {
  headers: Headers;
};

export const getRefreshTokenUrl = () => {
  return `https://api.dev.groble.im/api/v1/auth/refresh-token`;
};

export const refreshToken = async (
  options?: RequestInit,
): Promise<refreshTokenResponse> => {
  return customFetch<refreshTokenResponse>(getRefreshTokenUrl(), {
    ...options,
    method: "POST",
  });
};

/**
 * 새로운 비밀번호로 재설정합니다.
 * @summary 비밀번호 재설정
 */
export type resetPasswordResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type resetPasswordResponseComposite = resetPasswordResponse200;

export type resetPasswordResponse = resetPasswordResponseComposite & {
  headers: Headers;
};

export const getResetPasswordUrl = (params: ResetPasswordParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/auth/password/reset?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/auth/password/reset`;
};

export const resetPassword = async (
  resetPasswordRequest: ResetPasswordRequest,
  params: ResetPasswordParams,
  options?: RequestInit,
): Promise<resetPasswordResponse> => {
  return customFetch<resetPasswordResponse>(getResetPasswordUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(resetPasswordRequest),
  });
};

/**
 * 비밀번호 재설정 링크가 포함된 이메일을 발송합니다.
 * @summary 비밀번호 재설정 이메일 발송
 */
export type requestPasswordResetResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type requestPasswordResetResponseComposite =
  requestPasswordResetResponse200;

export type requestPasswordResetResponse =
  requestPasswordResetResponseComposite & {
    headers: Headers;
  };

export const getRequestPasswordResetUrl = () => {
  return `https://api.dev.groble.im/api/v1/auth/password/reset-request`;
};

export const requestPasswordReset = async (
  emailVerificationRequest: EmailVerificationRequest,
  options?: RequestInit,
): Promise<requestPasswordResetResponse> => {
  return customFetch<requestPasswordResetResponse>(
    getRequestPasswordResetUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(emailVerificationRequest),
    },
  );
};

/**
 * 로그아웃을 통해 쿠키와 토큰을 무효화합니다.
 * @summary 로그아웃
 */
export type logoutResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type logoutResponseComposite = logoutResponse200;

export type logoutResponse = logoutResponseComposite & {
  headers: Headers;
};

export const getLogoutUrl = (params: LogoutParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/auth/logout?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/auth/logout`;
};

export const logout = async (
  params: LogoutParams,
  options?: RequestInit,
): Promise<logoutResponse> => {
  return customFetch<logoutResponse>(getLogoutUrl(params), {
    ...options,
    method: "POST",
  });
};

/**
 * 회원가입 시 판매자 또는 구매자 중 선택합니다.
 * @deprecated
 * @summary 회원가입 유형 선택
 */
export type setInitialUserTypeResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type setInitialUserTypeResponse400 = {
  data: GrobleResponseVoid;
  status: 400;
};

export type setInitialUserTypeResponseComposite =
  | setInitialUserTypeResponse200
  | setInitialUserTypeResponse400;

export type setInitialUserTypeResponse = setInitialUserTypeResponseComposite & {
  headers: Headers;
};

export const getSetInitialUserTypeUrl = (params: SetInitialUserTypeParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/auth/initial-user-type?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/auth/initial-user-type`;
};

export const setInitialUserType = async (
  userTypeRequest: UserTypeRequest,
  params: SetInitialUserTypeParams,
  options?: RequestInit,
): Promise<setInitialUserTypeResponse> => {
  return customFetch<setInitialUserTypeResponse>(
    getSetInitialUserTypeUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(userTypeRequest),
    },
  );
};

/**
 * 사용자가 기입한 이메일에 인증 코드를 발급합니다.
 * @summary 통합 회원가입 이메일 인증 요청
 */
export type sendEmailVerificationForSignUpResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type sendEmailVerificationForSignUpResponseComposite =
  sendEmailVerificationForSignUpResponse200;

export type sendEmailVerificationForSignUpResponse =
  sendEmailVerificationForSignUpResponseComposite & {
    headers: Headers;
  };

export const getSendEmailVerificationForSignUpUrl = () => {
  return `https://api.dev.groble.im/api/v1/auth/email-verification/sign-up`;
};

export const sendEmailVerificationForSignUp = async (
  emailVerificationRequest: EmailVerificationRequest,
  options?: RequestInit,
): Promise<sendEmailVerificationForSignUpResponse> => {
  return customFetch<sendEmailVerificationForSignUpResponse>(
    getSendEmailVerificationForSignUpUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(emailVerificationRequest),
    },
  );
};

/**
 * 사용자가 기입한 이메일에 인증 코드를 발급합니다.
 * @summary 이메일 변경 이메일 인증 요청
 */
export type sendEmailVerificationForChangeEmailResponse200 = {
  data: GrobleResponseVoid;
  status: 200;
};

export type sendEmailVerificationForChangeEmailResponseComposite =
  sendEmailVerificationForChangeEmailResponse200;

export type sendEmailVerificationForChangeEmailResponse =
  sendEmailVerificationForChangeEmailResponseComposite & {
    headers: Headers;
  };

export const getSendEmailVerificationForChangeEmailUrl = (
  params: SendEmailVerificationForChangeEmailParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/auth/email-verification/change-email?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/auth/email-verification/change-email`;
};

export const sendEmailVerificationForChangeEmail = async (
  emailVerificationRequest: EmailVerificationRequest,
  params: SendEmailVerificationForChangeEmailParams,
  options?: RequestInit,
): Promise<sendEmailVerificationForChangeEmailResponse> => {
  return customFetch<sendEmailVerificationForChangeEmailResponse>(
    getSendEmailVerificationForChangeEmailUrl(params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(emailVerificationRequest),
    },
  );
};

export type handleWebhookResponse200 = {
  data: HandleWebhook200;
  status: 200;
};

export type handleWebhookResponseComposite = handleWebhookResponse200;

export type handleWebhookResponse = handleWebhookResponseComposite & {
  headers: Headers;
};

export const getHandleWebhookUrl = () => {
  return `https://api.dev.groble.im/api/payments/webhook`;
};

export const handleWebhook = async (
  handleWebhookBody: HandleWebhookBody,
  options?: RequestInit,
): Promise<handleWebhookResponse> => {
  return customFetch<handleWebhookResponse>(getHandleWebhookUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(handleWebhookBody),
  });
};

export type issueVirtualAccountResponse200 = {
  data: GrobleResponsePaymentResponse;
  status: 200;
};

export type issueVirtualAccountResponseComposite =
  issueVirtualAccountResponse200;

export type issueVirtualAccountResponse =
  issueVirtualAccountResponseComposite & {
    headers: Headers;
  };

export const getIssueVirtualAccountUrl = () => {
  return `https://api.dev.groble.im/api/payments/virtual-account`;
};

export const issueVirtualAccount = async (
  virtualAccountRequest: VirtualAccountRequest,
  options?: RequestInit,
): Promise<issueVirtualAccountResponse> => {
  return customFetch<issueVirtualAccountResponse>(getIssueVirtualAccountUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(virtualAccountRequest),
  });
};

export type preparePayment1Response200 = {
  data: GrobleResponsePaymentPrepareResponse;
  status: 200;
};

export type preparePayment1ResponseComposite = preparePayment1Response200;

export type preparePayment1Response = preparePayment1ResponseComposite & {
  headers: Headers;
};

export const getPreparePayment1Url = () => {
  return `https://api.dev.groble.im/api/payments/prepare`;
};

export const preparePayment1 = async (
  paymentPrepareRequest: PaymentPrepareRequest,
  options?: RequestInit,
): Promise<preparePayment1Response> => {
  return customFetch<preparePayment1Response>(getPreparePayment1Url(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(paymentPrepareRequest),
  });
};

export type cancelPaymentResponse200 = {
  data: GrobleResponsePaymentResponse;
  status: 200;
};

export type cancelPaymentResponseComposite = cancelPaymentResponse200;

export type cancelPaymentResponse = cancelPaymentResponseComposite & {
  headers: Headers;
};

export const getCancelPaymentUrl = () => {
  return `https://api.dev.groble.im/api/payments/cancel`;
};

export const cancelPayment = async (
  paymentCancelRequest: PaymentCancelRequest,
  options?: RequestInit,
): Promise<cancelPaymentResponse> => {
  return customFetch<cancelPaymentResponse>(getCancelPaymentUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(paymentCancelRequest),
  });
};

export type approvePayment1Response200 = {
  data: GrobleResponsePaymentResponse;
  status: 200;
};

export type approvePayment1ResponseComposite = approvePayment1Response200;

export type approvePayment1Response = approvePayment1ResponseComposite & {
  headers: Headers;
};

export const getApprovePayment1Url = () => {
  return `https://api.dev.groble.im/api/payments/approve`;
};

export const approvePayment1 = async (
  paymentApproveRequest: PaymentApproveRequest,
  options?: RequestInit,
): Promise<approvePayment1Response> => {
  return customFetch<approvePayment1Response>(getApprovePayment1Url(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(paymentApproveRequest),
  });
};

/**
 * 마이페이지 첫 화면에서 요약 정보를 조회합니다.
 * @summary 마이페이지 요약 정보 조회
 */
export type getUserMyPageSummaryResponse200 = {
  data: GetUserMyPageSummary200;
  status: 200;
};

export type getUserMyPageSummaryResponse401 = {
  data: UserMyPageSummaryResponse;
  status: 401;
};

export type getUserMyPageSummaryResponseComposite =
  | getUserMyPageSummaryResponse200
  | getUserMyPageSummaryResponse401;

export type getUserMyPageSummaryResponse =
  getUserMyPageSummaryResponseComposite & {
    headers: Headers;
  };

export const getGetUserMyPageSummaryUrl = (
  params: GetUserMyPageSummaryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/users/me/summary?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/users/me/summary`;
};

export const getUserMyPageSummary = async (
  params: GetUserMyPageSummaryParams,
  options?: RequestInit,
): Promise<getUserMyPageSummaryResponse> => {
  return customFetch<getUserMyPageSummaryResponse>(
    getGetUserMyPageSummaryUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 마이페이지에서 사용자 상세 정보를 조회합니다.
 * @summary 마이페이지 상세 정보 조회
 */
export type getUserMyPageDetailResponse200 = {
  data: UserMyPageDetailResponse;
  status: 200;
};

export type getUserMyPageDetailResponse401 = {
  data: UserMyPageDetailResponse;
  status: 401;
};

export type getUserMyPageDetailResponseComposite =
  | getUserMyPageDetailResponse200
  | getUserMyPageDetailResponse401;

export type getUserMyPageDetailResponse =
  getUserMyPageDetailResponseComposite & {
    headers: Headers;
  };

export const getGetUserMyPageDetailUrl = (
  params: GetUserMyPageDetailParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/users/me/detail?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/users/me/detail`;
};

export const getUserMyPageDetail = async (
  params: GetUserMyPageDetailParams,
  options?: RequestInit,
): Promise<getUserMyPageDetailResponse> => {
  return customFetch<getUserMyPageDetailResponse>(
    getGetUserMyPageDetailUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 사용자의 약관 동의 상태를 조회합니다.
 * @summary 사용자 약관 동의 상태 조회
 */
export type getUserTermsAgreementsResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type getUserTermsAgreementsResponseComposite =
  getUserTermsAgreementsResponse200;

export type getUserTermsAgreementsResponse =
  getUserTermsAgreementsResponseComposite & {
    headers: Headers;
  };

export const getGetUserTermsAgreementsUrl = (
  params: GetUserTermsAgreementsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/terms/user?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/terms/user`;
};

export const getUserTermsAgreements = async (
  params: GetUserTermsAgreementsParams,
  options?: RequestInit,
): Promise<getUserTermsAgreementsResponse> => {
  return customFetch<getUserTermsAgreementsResponse>(
    getGetUserTermsAgreementsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 현재 유효한 최신 버전의 약관 목록을 조회합니다.
 * @summary 현재 유효한 약관 목록 조회
 */
export type getActiveTermsResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type getActiveTermsResponseComposite = getActiveTermsResponse200;

export type getActiveTermsResponse = getActiveTermsResponseComposite & {
  headers: Headers;
};

export const getGetActiveTermsUrl = () => {
  return `https://api.dev.groble.im/api/v1/terms/active`;
};

export const getActiveTerms = async (
  options?: RequestInit,
): Promise<getActiveTermsResponse> => {
  return customFetch<getActiveTermsResponse>(getGetActiveTermsUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * 내가 구매한 자료 및 코칭 상품을 조회합니다.
 * @summary 내가 구매한 자료 및 코칭 상품
 */
export type getMyPurchasingContentsResponse200 = {
  data: GrobleResponseCursorResponseContentPreviewCardResponse;
  status: 200;
};

export type getMyPurchasingContentsResponseComposite =
  getMyPurchasingContentsResponse200;

export type getMyPurchasingContentsResponse =
  getMyPurchasingContentsResponseComposite & {
    headers: Headers;
  };

export const getGetMyPurchasingContentsUrl = (
  params: GetMyPurchasingContentsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/purchases/my?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/purchases/my`;
};

export const getMyPurchasingContents = async (
  params: GetMyPurchasingContentsParams,
  options?: RequestInit,
): Promise<getMyPurchasingContentsResponse> => {
  return customFetch<getMyPurchasingContentsResponse>(
    getGetMyPurchasingContentsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export type getClientKeyResponse200 = {
  data: GrobleResponseMapStringString;
  status: 200;
};

export type getClientKeyResponseComposite = getClientKeyResponse200;

export type getClientKeyResponse = getClientKeyResponseComposite & {
  headers: Headers;
};

export const getGetClientKeyUrl = () => {
  return `https://api.dev.groble.im/api/v1/payments/client-key`;
};

export const getClientKey = async (
  options?: RequestInit,
): Promise<getClientKeyResponse> => {
  return customFetch<getClientKeyResponse>(getGetClientKeyUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * 소셜 로그인 시작 전 리다이렉트 URI를 설정합니다.
 * @summary OAuth2 로그인 시작
 */
export type authorizeResponse200 = {
  data: void;
  status: 200;
};

export type authorizeResponseComposite = authorizeResponse200;

export type authorizeResponse = authorizeResponseComposite & {
  headers: Headers;
};

export const getAuthorizeUrl = (params: AuthorizeParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/oauth2/authorize?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/oauth2/authorize`;
};

export const authorize = async (
  params: AuthorizeParams,
  options?: RequestInit,
): Promise<authorizeResponse> => {
  return customFetch<authorizeResponse>(getAuthorizeUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * 컨텐츠(코칭&자료)를 상세 조회합니다.
 * @summary 컨텐츠 단건 조회 [코칭&자료 모두 조회 가능]
 */
export type getContentDetailResponse200 = {
  data: ContentDetailResponse;
  status: 200;
};

export type getContentDetailResponse404 = {
  data: ContentDetailResponse;
  status: 404;
};

export type getContentDetailResponseComposite =
  | getContentDetailResponse200
  | getContentDetailResponse404;

export type getContentDetailResponse = getContentDetailResponseComposite & {
  headers: Headers;
};

export const getGetContentDetailUrl = (contentId: number) => {
  return `https://api.dev.groble.im/api/v1/contents/${contentId}`;
};

export const getContentDetail = async (
  contentId: number,
  options?: RequestInit,
): Promise<getContentDetailResponse> => {
  return customFetch<getContentDetailResponse>(
    getGetContentDetailUrl(contentId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 나의 코칭 또는 자료 상품을 조회합니다.
 * @summary 나의 판매 상품 조회
 */
export type getMySellingContentsResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type getMySellingContentsResponse401 = {
  data: GrobleResponseCursorResponseContentPreviewCardResponse;
  status: 401;
};

export type getMySellingContentsResponseComposite =
  | getMySellingContentsResponse200
  | getMySellingContentsResponse401;

export type getMySellingContentsResponse =
  getMySellingContentsResponseComposite & {
    headers: Headers;
  };

export const getGetMySellingContentsUrl = (
  params: GetMySellingContentsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/contents/my/selling-contents?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/contents/my/selling-contents`;
};

export const getMySellingContents = async (
  params: GetMySellingContentsParams,
  options?: RequestInit,
): Promise<getMySellingContentsResponse> => {
  return customFetch<getMySellingContentsResponse>(
    getGetMySellingContentsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 홈화면 상품을 조회합니다.
 * @summary 홈화면 상품 조회
 */
export type getHomeContentsResponse200 = {
  data: GrobleResponseCursorResponseContentPreviewCardResponse;
  status: 200;
};

export type getHomeContentsResponseComposite = getHomeContentsResponse200;

export type getHomeContentsResponse = getHomeContentsResponseComposite & {
  headers: Headers;
};

export const getGetHomeContentsUrl = (params: GetHomeContentsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/contents/home?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/contents/home`;
};

export const getHomeContents = async (
  params: GetHomeContentsParams,
  options?: RequestInit,
): Promise<getHomeContentsResponse> => {
  return customFetch<getHomeContentsResponse>(getGetHomeContentsUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * 닉네임이 이미 사용 중인지 확인합니다. 회원가입 및 닉네임 수정 시 사용됩니다.
 * @summary 닉네임 중복 확인
 */
export type checkNicknameDuplicateResponse200 = {
  data: GrobleResponse;
  status: 200;
};

export type checkNicknameDuplicateResponse401 = {
  data: GrobleResponseNicknameDuplicateCheckResponse;
  status: 401;
};

export type checkNicknameDuplicateResponseComposite =
  | checkNicknameDuplicateResponse200
  | checkNicknameDuplicateResponse401;

export type checkNicknameDuplicateResponse =
  checkNicknameDuplicateResponseComposite & {
    headers: Headers;
  };

export const getCheckNicknameDuplicateUrl = (
  params: CheckNicknameDuplicateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.dev.groble.im/api/v1/auth/nickname/check?${stringifiedParams}`
    : `https://api.dev.groble.im/api/v1/auth/nickname/check`;
};

export const checkNicknameDuplicate = async (
  params: CheckNicknameDuplicateParams,
  options?: RequestInit,
): Promise<checkNicknameDuplicateResponse> => {
  return customFetch<checkNicknameDuplicateResponse>(
    getCheckNicknameDuplicateUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export type getPaymentDetailsResponse200 = {
  data: GrobleResponsePaymentResponse;
  status: 200;
};

export type getPaymentDetailsResponseComposite = getPaymentDetailsResponse200;

export type getPaymentDetailsResponse = getPaymentDetailsResponseComposite & {
  headers: Headers;
};

export const getGetPaymentDetailsUrl = (paymentKey: string) => {
  return `https://api.dev.groble.im/api/payments/${paymentKey}`;
};

export const getPaymentDetails = async (
  paymentKey: string,
  options?: RequestInit,
): Promise<getPaymentDetailsResponse> => {
  return customFetch<getPaymentDetailsResponse>(
    getGetPaymentDetailsUrl(paymentKey),
    {
      ...options,
      method: "GET",
    },
  );
};
